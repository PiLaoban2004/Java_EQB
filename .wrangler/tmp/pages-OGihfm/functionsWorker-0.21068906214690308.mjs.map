{
  "version": 3,
  "sources": ["../bundle-eXN1cc/checked-fetch.js", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/request/constants.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/hono.js", "../../../node_modules/hono/dist/adapter/cloudflare-pages/handler.js", "../../../src/questions.js", "../../../functions/api/%5B%5Bpath%5D%5D.js", "functionsRoutes-0.5194398398489415.mjs", "../../../../../.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/node_modules/path-to-regexp/src/index.ts", "../../../../../.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/pages-template-worker.ts", "../../../../../.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-eXN1cc/middleware-insertion-facade.js", "../../../../../.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-eXN1cc/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/yangzhixin/ClaudeTest/java_test/.wrangler/tmp/pages-OGihfm/functionsWorker-0.21068906214690308.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\n    \"/\",\n    url.charCodeAt(9) === 58 ? 13 : 8\n  );\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/adapter/cloudflare-pages/handler.ts\nimport { Context } from \"../../context.js\";\nimport { HTTPException } from \"../../http-exception.js\";\nvar handle = (app) => (eventContext) => {\n  return app.fetch(\n    eventContext.request,\n    { ...eventContext.env, eventContext },\n    {\n      waitUntil: eventContext.waitUntil,\n      passThroughOnException: eventContext.passThroughOnException,\n      props: {}\n    }\n  );\n};\nfunction handleMiddleware(middleware) {\n  return async (executionCtx) => {\n    const context = new Context(executionCtx.request, {\n      env: { ...executionCtx.env, eventContext: executionCtx },\n      executionCtx\n    });\n    let response = void 0;\n    try {\n      response = await middleware(context, async () => {\n        try {\n          context.res = await executionCtx.next();\n        } catch (error) {\n          if (error instanceof Error) {\n            context.error = error;\n          } else {\n            throw error;\n          }\n        }\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        context.error = error;\n      } else {\n        throw error;\n      }\n    }\n    if (response) {\n      return response;\n    }\n    if (context.error instanceof HTTPException) {\n      return context.error.getResponse();\n    }\n    if (context.error) {\n      throw context.error;\n    }\n    return context.res;\n  };\n}\nvar serveStatic = () => {\n  return async (c) => {\n    const env = c.env;\n    const res = await env.ASSETS.fetch(c.req.raw);\n    if (res.status === 404) {\n      return c.notFound();\n    }\n    return res;\n  };\n};\nexport {\n  handle,\n  handleMiddleware,\n  serveStatic\n};\n", "export const questions = \n[\n  {\n    \"id\": 1,\n    \"type\": \"multiple\",\n    \"question\": \"\u6839\u636E\u7B14\u8BB0\u5185\u5BB9\uFF0C\u5173\u4E8EJava\u96C6\u5408\uFF08Collection\uFF09\u4E0E\u6570\u7EC4\uFF08Array\uFF09\u7684\u5BF9\u6BD4\uFF0C\u4EE5\u4E0B\u54EA\u4E9B\u8BF4\u6CD5\u662F\u6B63\u786E\u7684\uFF1F\",\n    \"options\": [\n      \"\u6570\u7EC4\u7684\u957F\u5EA6\u662F\u4E0D\u53EF\u53D8\u7684\uFF0C\u800C\u96C6\u5408\u7684\u957F\u5EA6\u662F\u53EF\u53D8\u7684\u3002\",\n      \"\u6570\u7EC4\u53EF\u4EE5\u5B58\u50A8\u57FA\u672C\u6570\u636E\u7C7B\u578B\u548C\u5F15\u7528\u6570\u636E\u7C7B\u578B\uFF0C\u800C\u96C6\u5408\u53EA\u80FD\u5B58\u50A8\u5F15\u7528\u6570\u636E\u7C7B\u578B\u3002\",\n      \"\u5F53\u5904\u7406\u4E00\u7EC4\u6570\u91CF\u5728\u8FD0\u884C\u65F6\u53EF\u80FD\u52A8\u6001\u53D8\u5316\u7684\u6570\u636E\u65F6\uFF0C\u96C6\u5408\u662F\u6BD4\u6570\u7EC4\u66F4\u597D\u7684\u9009\u62E9\u3002\",\n      \"\u96C6\u5408\u7684\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u53EA\u80FD\u662F\u94FE\u8868\u6216\u54C8\u5E0C\u8868\uFF0C\u800C\u6570\u7EC4\u662F\u8FDE\u7EED\u7684\u5185\u5B58\u7A7A\u95F4\u3002\"\n    ],\n    \"answer\": [\n      \"\u6570\u7EC4\u7684\u957F\u5EA6\u662F\u4E0D\u53EF\u53D8\u7684\uFF0C\u800C\u96C6\u5408\u7684\u957F\u5EA6\u662F\u53EF\u53D8\u7684\u3002\",\n      \"\u6570\u7EC4\u53EF\u4EE5\u5B58\u50A8\u57FA\u672C\u6570\u636E\u7C7B\u578B\u548C\u5F15\u7528\u6570\u636E\u7C7B\u578B\uFF0C\u800C\u96C6\u5408\u53EA\u80FD\u5B58\u50A8\u5F15\u7528\u6570\u636E\u7C7B\u578B\u3002\",\n      \"\u5F53\u5904\u7406\u4E00\u7EC4\u6570\u91CF\u5728\u8FD0\u884C\u65F6\u53EF\u80FD\u52A8\u6001\u53D8\u5316\u7684\u6570\u636E\u65F6\uFF0C\u96C6\u5408\u662F\u6BD4\u6570\u7EC4\u66F4\u597D\u7684\u9009\u62E9\u3002\"\n    ],\n    \"score\": 3,\n    \"explanation\": \"\u8FD9\u662F\u96C6\u5408\u4E0E\u6570\u7EC4\u6700\u6838\u5FC3\u7684\u533A\u522B\u3002\u96C6\u5408\u7684\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u662F\u591A\u6837\u7684\uFF0C\u5305\u62EC\u6570\u7EC4\uFF08\u5982ArrayList\uFF09\u3001\u94FE\u8868\uFF08\u5982LinkedList\uFF09\u3001\u54C8\u5E0C\u8868\uFF08\u5982HashSet\uFF09\u3001\u7EA2\u9ED1\u6811\uFF08\u5982TreeSet\uFF09\u7B49\uFF0C\u6240\u4EE5\u9009\u9879D\u662F\u9519\u8BEF\u7684\u3002\"\n  },\n  {\n    \"id\": 2,\n    \"type\": \"single\",\n    \"question\": \"\u5728Java\u96C6\u5408\u6846\u67B6\u4E2D\uFF0C\u54EA\u4E00\u4E2A\u9876\u5C42\u63A5\u53E3\u7528\u4E8E\u8868\u793A\u952E\u503C\u5BF9\uFF08Key-Value Pair\uFF09\u7684\u96C6\u5408\uFF1F\",\n    \"options\": [\"Collection\", \"List\", \"Set\", \"Map\"],\n    \"answer\": \"Map\",\n    \"score\": 1,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u660E\u786E\u6307\u51FA\uFF0CJava\u96C6\u5408\u6846\u67B6\u5206\u4E3A\u4E24\u5927\u9876\u5C42\u63A5\u53E3\uFF1A`Collection`\u7528\u4E8E\u5904\u7406\u72EC\u7ACB\u7684\u3001\u5355\u4E2A\u7684\u5143\u7D20\uFF1B`Map`\u7528\u4E8E\u5904\u7406\u952E\u503C\u5BF9\u6570\u636E\u3002\"\n  },\n  {\n    \"id\": 3,\n    \"type\": \"short_answer\",\n    \"question\": \"\u8BF7\u7B80\u8FF0`List`\u548C`Set`\u63A5\u53E3\u5728\u6838\u5FC3\u7279\u6027\u4E0A\u7684\u4E3B\u8981\u533A\u522B\u3002\",\n    \"answer\": \"`List`\u63A5\u53E3\u7684\u7279\u70B9\u662F\u5143\u7D20\u6709\u5E8F\uFF08\u6309\u63D2\u5165\u987A\u5E8F\u5B58\u50A8\uFF09\u4E14\u53EF\u91CD\u590D\u3002`Set`\u63A5\u53E3\u7684\u7279\u70B9\u662F\u5143\u7D20\u901A\u5E38\u65E0\u5E8F\uFF08\u4E0D\u4FDD\u8BC1\u63D2\u5165\u987A\u5E8F\uFF09\u4E14\u4E0D\u53EF\u91CD\u590D\u3002\",\n    \"score\": 2.5,\n    \"explanation\": \"\u8FD9\u662F\u5BF9`Collection`\u4E24\u5927\u6838\u5FC3\u5B50\u63A5\u53E3\u57FA\u672C\u7279\u5F81\u7684\u8003\u5BDF\uFF0C\u7406\u89E3\u5B83\u4EEC\u7684\u533A\u522B\u662F\u9009\u62E9\u6B63\u786E\u96C6\u5408\u7C7B\u7684\u7B2C\u4E00\u6B65\u3002\"\n  },\n  {\n    \"id\": 4,\n    \"type\": \"single\",\n    \"question\": \"\u5728\u4F55\u79CD\u4E1A\u52A1\u573A\u666F\u4E0B\uFF0C\u4F7F\u7528`LinkedList`\u4F1A\u6BD4`ArrayList`\u5177\u6709\u660E\u663E\u7684\u6027\u80FD\u4F18\u52BF\uFF1F\",\n    \"options\": [\n      \"\u9700\u8981\u9891\u7E41\u5730\u6839\u636E\u7D22\u5F15\u968F\u673A\u8BBF\u95EE\u96C6\u5408\u4E2D\u7684\u5143\u7D20\u3002\",\n      \"\u96C6\u5408\u4E2D\u7EDD\u5927\u591A\u6570\u64CD\u4F5C\u662F\u904D\u5386\u5143\u7D20\u3002\",\n      \"\u9700\u8981\u9891\u7E41\u5730\u5728\u5217\u8868\u7684\u5934\u90E8\u548C\u5C3E\u90E8\u8FDB\u884C\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\u3002\",\n      \"\u96C6\u5408\u521B\u5EFA\u540E\uFF0C\u5143\u7D20\u6570\u91CF\u56FA\u5B9A\u4E0D\u53D8\uFF0C\u4E3B\u8981\u7528\u4E8E\u5B58\u50A8\u548C\u8BFB\u53D6\u3002\"\n    ],\n    \"answer\": \"\u9700\u8981\u9891\u7E41\u5730\u5728\u5217\u8868\u7684\u5934\u90E8\u548C\u5C3E\u90E8\u8FDB\u884C\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u6839\u636E\u7B14\u8BB0\u4E2D\u7684\u9009\u578B\u603B\u7ED3\uFF0C`LinkedList`\u7684\u5E95\u5C42\u662F\u53CC\u5411\u94FE\u8868\uFF0C\u5BF9\u5934\u5C3E\u8282\u70B9\u7684\u64CD\u4F5C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\uFF0C\u8FDC\u4F18\u4E8E`ArrayList`\u7684O(n)\u3002\u800C\u968F\u673A\u8BBF\u95EE\u662F`ArrayList`\u7684\u5F3A\u9879\uFF08O(1)\uFF09\u3002\"\n  },\n  {\n    \"id\": 5,\n    \"type\": \"multiple\",\n    \"question\": \"\u5173\u4E8E`ArrayList`\u7684\u5E95\u5C42\u5B9E\u73B0\u548C\u7279\u6027\uFF0C\u4EE5\u4E0B\u54EA\u4E9B\u8BF4\u6CD5\u662F\u6B63\u786E\u7684\uFF1F\",\n    \"options\": [\n      \"\u5B83\u7684\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u662F\u52A8\u6001\u6570\u7EC4\u3002\",\n      \"\u901A\u8FC7\u7D22\u5F15`get(index)`\u8BBF\u95EE\u5143\u7D20\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\u3002\",\n      \"\u5728\u5217\u8868\u7684\u4E2D\u95F4\u4F4D\u7F6E\u63D2\u5165\u6216\u5220\u9664\u5143\u7D20\uFF0C\u5176\u65F6\u95F4\u590D\u6742\u5EA6\u901A\u5E38\u4E3AO(n)\u3002\",\n      \"\u5F53\u5BB9\u91CF\u4E0D\u8DB3\u65F6\uFF0C`ArrayList`\u4F1A\u81EA\u52A8\u6269\u5BB9\uFF0C\u521B\u5EFA\u4E00\u4E2A\u66F4\u5927\u7684\u65B0\u6570\u7EC4\u5E76\u590D\u5236\u6240\u6709\u65E7\u5143\u7D20\u3002\"\n    ],\n    \"answer\": [\n      \"\u5B83\u7684\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u662F\u52A8\u6001\u6570\u7EC4\u3002\",\n      \"\u901A\u8FC7\u7D22\u5F15`get(index)`\u8BBF\u95EE\u5143\u7D20\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\u3002\",\n      \"\u5728\u5217\u8868\u7684\u4E2D\u95F4\u4F4D\u7F6E\u63D2\u5165\u6216\u5220\u9664\u5143\u7D20\uFF0C\u5176\u65F6\u95F4\u590D\u6742\u5EA6\u901A\u5E38\u4E3AO(n)\u3002\",\n      \"\u5F53\u5BB9\u91CF\u4E0D\u8DB3\u65F6\uFF0C`ArrayList`\u4F1A\u81EA\u52A8\u6269\u5BB9\uFF0C\u521B\u5EFA\u4E00\u4E2A\u66F4\u5927\u7684\u65B0\u6570\u7EC4\u5E76\u590D\u5236\u6240\u6709\u65E7\u5143\u7D20\u3002\"\n    ],\n    \"score\": 4,\n    \"explanation\": \"\u8FD9\u56DB\u4E2A\u9009\u9879\u5168\u9762\u5730\u6982\u62EC\u4E86`ArrayList`\u7684\u6838\u5FC3\u5DE5\u4F5C\u539F\u7406\u548C\u6027\u80FD\u7279\u70B9\uFF0C\u8FD9\u4E9B\u90FD\u662FJava\u5F00\u53D1\u4E2D\u5FC5\u987B\u638C\u63E1\u7684\u57FA\u7840\u77E5\u8BC6\u3002\"\n  },\n  {\n    \"id\": 6,\n    \"type\": \"short_answer\",\n    \"question\": \"\u4E3A\u4EC0\u4E48\u5728\u521B\u5EFA `ArrayList` \u65F6\uFF0C\u63A8\u8350\u6307\u5B9A\u4E00\u4E2A\u9884\u4F30\u7684\u521D\u59CB\u5BB9\u91CF\uFF08\u5982 `new ArrayList(100)`\uFF09\uFF1F\u8FD9\u6837\u505A\u6709\u4EC0\u4E48\u597D\u5904\uFF1F\",\n    \"answer\": \"\u63A8\u8350\u6307\u5B9A\u521D\u59CB\u5BB9\u91CF\u662F\u4E3A\u4E86\u6027\u80FD\u4F18\u5316\u3002\u5982\u679C\u9884\u5148\u77E5\u9053\u5927\u81F4\u7684\u6570\u636E\u91CF\uFF0C\u6307\u5B9A\u521D\u59CB\u5BB9\u91CF\u53EF\u4EE5\u907F\u514D\u6216\u51CF\u5C11`ArrayList`\u5728\u6DFB\u52A0\u5143\u7D20\u8FC7\u7A0B\u4E2D\u56E0\u8D85\u51FA\u5BB9\u91CF\u800C\u89E6\u53D1\u7684\u591A\u6B21\u201C\u6269\u5BB9\u201D\u64CD\u4F5C\u3002\u56E0\u4E3A\u6BCF\u6B21\u6269\u5BB9\u90FD\u9700\u8981\u521B\u5EFA\u65B0\u6570\u7EC4\u5E76\u590D\u5236\u65E7\u6570\u7EC4\u7684\u5168\u90E8\u5143\u7D20\uFF0C\u8FD9\u662F\u4E00\u4E2A\u8017\u65F6\u7684\u8FC7\u7A0B\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u8FD9\u662F\u4E00\u4E2A\u91CD\u8981\u7684\u6027\u80FD\u4F18\u5316\u6280\u5DE7\u3002\u5728\u80FD\u9884\u4F30\u6570\u636E\u91CF\u7684\u573A\u666F\u4E0B\uFF08\u4F8B\u5982\uFF0C\u4ECE\u6570\u636E\u5E93\u4E00\u6B21\u6027\u67E5\u8BE2N\u6761\u8BB0\u5F55\u653E\u5165List\uFF09\uFF0C\u6307\u5B9A\u521D\u59CB\u5BB9\u91CF\u662F\u4E13\u4E1A\u5F00\u53D1\u8005\u7684\u4E60\u60EF\u3002\"\n  },\n  {\n    \"id\": 7,\n    \"type\": \"code\",\n    \"question\": \"\u8BF7\u4F7F\u7528 `LinkedList` \u7684\u7279\u6709API\uFF0C\u6A21\u62DF\u4E00\u4E2A\u6808\uFF08Stack\uFF09\u7684\u5165\u6808\uFF08push\uFF09\u548C\u51FA\u6808\uFF08pop\uFF09\u64CD\u4F5C\u3002\u5047\u8BBE `LinkedList<String> stack = new LinkedList<>();`\",\n    \"answer\": \"// \u5165\u6808 \\nstack.push(\\\"element1\\\"); \\n// \u6216\u8005 \\nstack.addFirst(\\\"element1\\\"); \\n\\n// \u51FA\u6808 \\nString element = stack.pop(); \\n// \u6216\u8005 \\nString element = stack.removeFirst();\",\n    \"score\": 3.5,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u63D0\u5230`LinkedList`\u5B9E\u73B0\u4E86`Deque`\u63A5\u53E3\uFF0C\u56E0\u6B64\u63D0\u4F9B\u4E86`push`\u548C`pop`\u7B49\u65B9\u6CD5\uFF0C\u53EF\u4EE5\u65B9\u4FBF\u5730\u4F5C\u4E3A\u6808\u4F7F\u7528\u3002\u8FD9\u8003\u5BDF\u4E86\u5BF9`LinkedList`\u4F5C\u4E3A\u53CC\u7AEF\u961F\u5217/\u6808\u4F7F\u7528\u7684\u719F\u6089\u7A0B\u5EA6\u3002\"\n  },\n  {\n    \"id\": 8,\n    \"type\": \"single\",\n    \"question\": \"\u5F15\u5165\u6CDB\u578B\uFF08Generics\uFF09\u6700\u4E3B\u8981\u7684\u76EE\u6807\u662F\u4EC0\u4E48\uFF1F\",\n    \"options\": [\n      \"\u63D0\u5347\u96C6\u5408\u7684\u8FD0\u884C\u6548\u7387\u3002\",\n      \"\u51CF\u5C11\u4EE3\u7801\u91CF\u3002\",\n      \"\u5C06\u7C7B\u578B\u68C0\u67E5\u4ECE\u8FD0\u884C\u65F6\u63D0\u524D\u5230\u7F16\u8BD1\u65F6\uFF0C\u4EE5\u63D0\u4F9B\u7C7B\u578B\u5B89\u5168\u3002\",\n      \"\u5B9E\u73B0\u96C6\u5408\u7684\u591A\u6001\u6027\uFF0C\u8BA9 `List<Dog>` \u6210\u4E3A `List<Animal>` \u7684\u5B50\u7C7B\u3002\"\n    ],\n    \"answer\": \"\u5C06\u7C7B\u578B\u68C0\u67E5\u4ECE\u8FD0\u884C\u65F6\u63D0\u524D\u5230\u7F16\u8BD1\u65F6\uFF0C\u4EE5\u63D0\u4F9B\u7C7B\u578B\u5B89\u5168\u3002\",\n    \"score\": 2,\n    \"explanation\": \"\u6CDB\u578B\u7684\u6838\u5FC3\u4EF7\u503C\u5728\u4E8E\u7C7B\u578B\u5B89\u5168\u3002\u5B83\u5141\u8BB8\u7F16\u8BD1\u5668\u5728\u7F16\u8BD1\u9636\u6BB5\u5C31\u53D1\u73B0\u7C7B\u578B\u4E0D\u5339\u914D\u7684\u9519\u8BEF\uFF0C\u907F\u514D\u4E86\u5728\u8FD0\u884C\u65F6\u53EF\u80FD\u51FA\u73B0\u7684`ClassCastException`\uFF0C\u5E76\u514D\u53BB\u4E86\u7E41\u7410\u7684\u624B\u52A8\u7C7B\u578B\u8F6C\u6362\u3002\"\n  },\n  {\n    \"id\": 9,\n    \"type\": \"short_answer\",\n    \"question\": \"\u6839\u636E\u7B14\u8BB0\uFF0C\u8BF7\u89E3\u91CA\u4E3A\u4EC0\u4E48`List<User>`\u4E0D\u662F`List<Person>`\u7684\u5B50\u7C7B\u578B\uFF0C\u5373\u4F7F`User`\u662F`Person`\u7684\u5B50\u7C7B\uFF1F\u8FD9\u4E2A\u7279\u6027\u53EB\u4EC0\u4E48\uFF1F\",\n    \"answer\": \"\u8FD9\u4E2A\u7279\u6027\u53EB\u505A\u201C\u6CDB\u578B\u4E0D\u5177\u6709\u591A\u6001\u6027\u201D\u3002`List<User>`\u548C`List<Person>`\u662F\u4E24\u79CD\u5B8C\u5168\u4E0D\u540C\u7684\u7C7B\u578B\uFF0C\u5B83\u4EEC\u4E4B\u95F4\u6CA1\u6709\u7EE7\u627F\u5173\u7CFB\u3002\u5982\u679C\u5141\u8BB8\u8FD9\u79CD\u8D4B\u503C\uFF08`List<Person> pList = new ArrayList<User>()`\uFF09\uFF0C\u90A3\u4E48\u4E4B\u540E\u5C31\u53EF\u4EE5\u901A\u8FC7`pList.add(new Animal())`\u5411\u4E00\u4E2A\u672C\u5E94\u53EA\u5B58\u653E`User`\u7684\u96C6\u5408\u4E2D\u6DFB\u52A0\u5176\u4ED6\u7C7B\u578B\u7684\u5BF9\u8C61\uFF0C\u8FD9\u5C06\u7834\u574F\u6CDB\u578B\u7684\u7C7B\u578B\u5B89\u5168\u4FDD\u8BC1\u3002\",\n    \"score\": 3.5,\n    \"explanation\": \"\u8FD9\u662F\u4E00\u4E2A\u6CDB\u578B\u4E2D\u975E\u5E38\u91CD\u8981\u4E14\u5BB9\u6613\u6DF7\u6DC6\u7684\u6982\u5FF5\u3002\u7406\u89E3\u8FD9\u4E00\u70B9\u5BF9\u4E8E\u6B63\u786E\u4F7F\u7528\u6CDB\u578B\u548C\u7406\u89E3\u6CDB\u578B\u901A\u914D\u7B26\uFF08\u5982`? extends Person`\uFF09\u81F3\u5173\u91CD\u8981\u3002\"\n  },\n  {\n    \"id\": 10,\n    \"type\": \"multiple\",\n    \"question\": \"\u8981\u786E\u4FDD\u4E00\u4E2A\u81EA\u5B9A\u4E49\u7C7B\u7684\u5BF9\u8C61\u80FD\u591F\u5728`HashSet`\u4E2D\u6B63\u786E\u5730\u5B9E\u73B0\u552F\u4E00\u6027\uFF08\u5373\u5185\u5BB9\u76F8\u540C\u7684\u5BF9\u8C61\u88AB\u89C6\u4E3A\u540C\u4E00\u4E2A\uFF09\uFF0C\u5FC5\u987B\u91C7\u53D6\u54EA\u4E9B\u63AA\u65BD\uFF1F\",\n    \"options\": [\n      \"\u8BE5\u7C7B\u5FC5\u987B\u5B9E\u73B0`Serializable`\u63A5\u53E3\u3002\",\n      \"\u8BE5\u7C7B\u5FC5\u987B\u91CD\u5199`equals()`\u65B9\u6CD5\uFF0C\u5B9A\u4E49\u5BF9\u8C61\u5185\u5BB9\u76F8\u7B49\u7684\u903B\u8F91\u3002\",\n      \"\u8BE5\u7C7B\u5FC5\u987B\u91CD\u5199`hashCode()`\u65B9\u6CD5\uFF0C\u5E76\u4FDD\u8BC1`equals()`\u4E3A`true`\u7684\u4E24\u4E2A\u5BF9\u8C61\u5176`hashCode()`\u8FD4\u56DE\u503C\u4E5F\u5FC5\u987B\u76F8\u7B49\u3002\",\n      \"\u8BE5\u7C7B\u5FC5\u987B\u5B9E\u73B0`Comparable`\u63A5\u53E3\u3002\"\n    ],\n    \"answer\": [\n      \"\u8BE5\u7C7B\u5FC5\u987B\u91CD\u5199`equals()`\u65B9\u6CD5\uFF0C\u5B9A\u4E49\u5BF9\u8C61\u5185\u5BB9\u76F8\u7B49\u7684\u903B\u8F91\u3002\",\n      \"\u8BE5\u7C7B\u5FC5\u987B\u91CD\u5199`hashCode()`\u65B9\u6CD5\uFF0C\u5E76\u4FDD\u8BC1`equals()`\u4E3A`true`\u7684\u4E24\u4E2A\u5BF9\u8C61\u5176`hashCode()`\u8FD4\u56DE\u503C\u4E5F\u5FC5\u987B\u76F8\u7B49\u3002\"\n    ],\n    \"score\": 4,\n    \"explanation\": \"`HashSet`\u7684\u552F\u4E00\u6027\u5224\u65AD\u4F9D\u8D56\u4E8E`hashCode()`\u548C`equals()`\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u3002`hashCode()`\u7528\u4E8E\u5FEB\u901F\u5B9A\u4F4D\u5B58\u50A8\u4F4D\u7F6E\uFF0C`equals()`\u7528\u4E8E\u5728\u54C8\u5E0C\u51B2\u7A81\u65F6\u8FDB\u884C\u7CBE\u786E\u6BD4\u8F83\u3002\u4E24\u8005\u5FC5\u987B\u540C\u65F6\u88AB\u6B63\u786E\u91CD\u5199\uFF0C\u5426\u5219\u4F1A\u5BFC\u81F4\u96C6\u5408\u884C\u4E3A\u5F02\u5E38\u3002\"\n  },\n  {\n    \"id\": 11,\n    \"type\": \"short_answer\",\n    \"question\": \"\u8BF7\u7B80\u8FF0\u5F53\u5411\u4E00\u4E2A`HashSet`\u4E2D`add(element)`\u4E00\u4E2A\u65B0\u5143\u7D20\u65F6\uFF0C\u5176\u5185\u90E8\u7684\u8BE6\u7EC6\u5DE5\u4F5C\u6D41\u7A0B\u3002\",\n    \"answer\": \"1. \u9996\u5148\u8C03\u7528`element`\u7684`hashCode()`\u65B9\u6CD5\u8BA1\u7B97\u54C8\u5E0C\u7801\uFF0C\u901A\u8FC7\u54C8\u5E0C\u7B97\u6CD5\u5B9A\u4F4D\u5230\u5E95\u5C42`HashMap`\u4E2D\u7684\u4E00\u4E2A\u6876\uFF08bucket\uFF09\u4F4D\u7F6E\u3002\\n2. \u5982\u679C\u8BE5\u6876\u4E3A\u7A7A\uFF0C\u76F4\u63A5\u5C06\u5143\u7D20\u5B58\u5165\uFF0C\u6DFB\u52A0\u6210\u529F\u3002\\n3. \u5982\u679C\u8BE5\u6876\u4E0D\u4E3A\u7A7A\uFF08\u53D1\u751F\u54C8\u5E0C\u51B2\u7A81\uFF09\uFF0C\u5219\u904D\u5386\u6876\u4E2D\u7684\u6240\u6709\u73B0\u6709\u5143\u7D20\u3002\\n4. \u4F7F\u7528\u65B0\u5143\u7D20`element`\u7684`equals()`\u65B9\u6CD5\u4E0E\u6876\u5185\u6BCF\u4E2A\u73B0\u6709\u5143\u7D20\u8FDB\u884C\u6BD4\u8F83\u3002\\n5. \u5982\u679C\u6709\u4EFB\u4F55\u4E00\u6B21`equals()`\u6BD4\u8F83\u8FD4\u56DE`true`\uFF0C\u5219\u8BA4\u4E3A\u5143\u7D20\u5DF2\u5B58\u5728\uFF0C\u6DFB\u52A0\u5931\u8D25\u3002\\n6. \u5982\u679C\u904D\u5386\u5B8C\u6240\u6709\u5143\u7D20\uFF0C`equals()`\u90FD\u8FD4\u56DE`false`\uFF0C\u5219\u5C06\u65B0\u5143\u7D20\u6DFB\u52A0\u5230\u8FD9\u4E2A\u6876\u4E2D\uFF08\u901A\u5E38\u662F\u94FE\u8868\u6216\u7EA2\u9ED1\u6811\u7684\u672B\u5C3E\uFF09\uFF0C\u6DFB\u52A0\u6210\u529F\u3002\",\n    \"score\": 4.5,\n    \"explanation\": \"\u8FD9\u4E2A\u95EE\u9898\u6DF1\u5165\u8003\u5BDF\u4E86`HashSet`\u552F\u4E00\u6027\u4FDD\u8BC1\u7684\u5E95\u5C42\u539F\u7406\uFF0C\u662FJava\u9762\u8BD5\u4E2D\u5173\u4E8E\u96C6\u5408\u90E8\u5206\u7684\u9AD8\u9891\u8003\u70B9\uFF0C\u4F53\u73B0\u4E86\u5BF9\u6570\u636E\u7ED3\u6784\u5B9E\u73B0\u7684\u6DF1\u5165\u7406\u89E3\u3002\"\n  },\n  {\n    \"id\": 12,\n    \"type\": \"single\",\n    \"question\": \"\u6839\u636E\u7B14\u8BB0\uFF0C`HashSet`\u7684\u5E95\u5C42\u662F\u4F7F\u7528\u54EA\u4E00\u4E2A\u96C6\u5408\u7C7B\u6765\u5B9E\u73B0\u5176\u529F\u80FD\u7684\uFF1F\",\n    \"options\": [\"ArrayList\", \"TreeMap\", \"LinkedList\", \"HashMap\"],\n    \"answer\": \"HashMap\",\n    \"score\": 2,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u660E\u786E\u6307\u51FA\uFF0C`HashSet`\u5185\u90E8\u6301\u6709\u4E00\u4E2A`HashMap`\u5B9E\u4F8B\u3002\u6DFB\u52A0\u5230`HashSet`\u4E2D\u7684\u5143\u7D20\u5B9E\u9645\u4E0A\u662F\u4F5C\u4E3A`key`\u5B58\u50A8\u5728\u5185\u90E8\u7684`HashMap`\u4E2D\uFF0C\u800C`value`\u5219\u662F\u4E00\u4E2A\u56FA\u5B9A\u7684\u5360\u4F4D\u5BF9\u8C61\u3002\"\n  },\n  {\n    \"id\": 13,\n    \"type\": \"multiple\",\n    \"question\": \"\u5173\u4E8E`HashMap`\u548C`Hashtable`\u7684\u5BF9\u6BD4\uFF0C\u4E0B\u5217\u8BF4\u6CD5\u6B63\u786E\u7684\u6709\u54EA\u4E9B\uFF1F\",\n    \"options\": [\n      \"`HashMap`\u662F\u975E\u7EBF\u7A0B\u5B89\u5168\u7684\uFF0C\u800C`Hashtable`\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\u3002\",\n      \"`HashMap`\u5141\u8BB8\u4E00\u4E2Anull\u952E\u548C\u591A\u4E2Anull\u503C\uFF0C\u800C`Hashtable`\u4E0D\u5141\u8BB8\u4EFB\u4F55null\u952E\u6216null\u503C\u3002\",\n      \"\u5728\u65B0\u4EE3\u7801\u4E2D\uFF0C\u5982\u679C\u9700\u8981\u7EBF\u7A0B\u5B89\u5168\u7684Map\uFF0C\u5E94\u4F18\u5148\u9009\u62E9`Hashtable`\u800C\u4E0D\u662F`ConcurrentHashMap`\u3002\",\n      \"`HashMap`\u548C`Hashtable`\u7684\u9ED8\u8BA4\u521D\u59CB\u5BB9\u91CF\u548C\u6269\u5BB9\u673A\u5236\u5B8C\u5168\u76F8\u540C\u3002\"\n    ],\n    \"answer\": [\n      \"`HashMap`\u662F\u975E\u7EBF\u7A0B\u5B89\u5168\u7684\uFF0C\u800C`Hashtable`\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\u3002\",\n      \"`HashMap`\u5141\u8BB8\u4E00\u4E2Anull\u952E\u548C\u591A\u4E2Anull\u503C\uFF0C\u800C`Hashtable`\u4E0D\u5141\u8BB8\u4EFB\u4F55null\u952E\u6216null\u503C\u3002\"\n    ],\n    \"score\": 3.5,\n    \"explanation\": \"`Hashtable`\u662F\u9057\u7559\u7684\u7EBF\u7A0B\u5B89\u5168\u7C7B\uFF0C\u6027\u80FD\u8F83\u5DEE\uFF0C\u73B0\u4EE3\u5E76\u53D1\u7F16\u7A0B\u63A8\u8350\u4F7F\u7528`ConcurrentHashMap`\u3002`HashMap`\u548C`Hashtable`\u7684\u521D\u59CB\u5BB9\u91CF\u548C\u6269\u5BB9\u7B56\u7565\u4E5F\u4E0D\u540C\u3002\u56E0\u6B64C\u548CD\u662F\u9519\u8BEF\u7684\u3002\"\n  },\n  {\n    \"id\": 14,\n    \"type\": \"single\",\n    \"question\": \"\u5728\u904D\u5386\u4E00\u4E2A`Map`\u96C6\u5408\u65F6\uFF0C\u54EA\u79CD\u904D\u5386\u65B9\u5F0F\u88AB\u8BA4\u4E3A\u662F\u6700\u9AD8\u6548\u7684\uFF0C\u4E3A\u4EC0\u4E48\uFF1F\",\n    \"options\": [\n      \"\u904D\u5386`keySet()`\uFF0C\u56E0\u4E3Akey\u662F\u552F\u4E00\u7684\u3002\",\n      \"\u904D\u5386`values()`\uFF0C\u56E0\u4E3A\u76F4\u63A5\u83B7\u53D6\u503C\u6700\u5FEB\u3002\",\n      \"\u904D\u5386`entrySet()`\uFF0C\u56E0\u4E3A\u5B83\u53EF\u4EE5\u4E00\u6B21\u6027\u83B7\u53D6\u5230key\u548Cvalue\u3002\",\n      \"\u4F7F\u7528\u8FED\u4EE3\u5668\u904D\u5386`keySet()`\uFF0C\u56E0\u4E3A\u8FED\u4EE3\u5668\u6700\u6807\u51C6\u3002\"\n    ],\n    \"answer\": \"\u904D\u5386`entrySet()`\uFF0C\u56E0\u4E3A\u5B83\u53EF\u4EE5\u4E00\u6B21\u6027\u83B7\u53D6\u5230key\u548Cvalue\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u904D\u5386`keySet()`\u540E\uFF0C\u8FD8\u9700\u8981\u901A\u8FC7`map.get(key)`\u518D\u6B21\u67E5\u627E`value`\uFF0C\u8FD9\u5728`HashMap`\u4E2D\u6D89\u53CA\u5230\u4E00\u6B21\u989D\u5916\u7684\u54C8\u5E0C\u5B9A\u4F4D\u3002\u800C\u904D\u5386`entrySet()`\uFF0C\u6BCF\u4E2A`Map.Entry`\u5BF9\u8C61\u5DF2\u7ECF\u5305\u542B\u4E86`key`\u548C`value`\uFF0C\u65E0\u9700\u4E8C\u6B21\u67E5\u627E\uFF0C\u56E0\u6B64\u6548\u7387\u6700\u9AD8\u3002\"\n  },\n  {\n    \"id\": 15,\n    \"type\": \"code\",\n    \"question\": \"\u8BF7\u8865\u5168\u4EE5\u4E0B\u4EE3\u7801\uFF0C\u4F7F\u7528\u63A8\u8350\u7684\u65B9\u5F0F\uFF08`entrySet`\uFF09\u904D\u5386\u4E00\u4E2A`HashMap`\u5E76\u6253\u5370\u5176\u6240\u6709\u952E\u503C\u5BF9\u3002\",\n    \"answer\": \"Map<Integer, String> map = new HashMap<>();\\nmap.put(1, \\\"Java\\\");\\nmap.put(2, \\\"Python\\\");\\n\\nSet<Map.Entry<Integer, String>> entries = map.entrySet();\\nfor (Map.Entry<Integer, String> entry : entries) {\\n    System.out.println(entry.getKey() + \\\" -> \\\" + entry.getValue());\\n}\",\n    \"score\": 3.5,\n    \"explanation\": \"\u8003\u5BDF\u5BF9`Map`\u6700\u9AD8\u6548\u904D\u5386\u65B9\u5F0F`entrySet`\u7684\u5B9E\u9645\u7F16\u7801\u80FD\u529B\uFF0C\u8FD9\u662F\u65E5\u5E38\u5F00\u53D1\u4E2D\u7684\u5E38\u7528\u4EE3\u7801\u7247\u6BB5\u3002\"\n  },\n  {\n    \"id\": 16,\n    \"type\": \"short_answer\",\n    \"question\": \"\u4EC0\u4E48\u662F`ConcurrentModificationException`\uFF1F\u5728\u4EC0\u4E48\u60C5\u51B5\u4E0B\u4F1A\u53D1\u751F\uFF1F\",\n    \"answer\": \"`ConcurrentModificationException`\uFF08\u5E76\u53D1\u4FEE\u6539\u5F02\u5E38\uFF09\u662F\u4E00\u4E2A\u8FD0\u884C\u65F6\u5F02\u5E38\u3002\u5B83\u901A\u5E38\u53D1\u751F\u5728\u4F7F\u7528\u8FED\u4EE3\u5668\uFF08\u5305\u62EC\u589E\u5F3Afor\u5FAA\u73AF\uFF09\u904D\u5386\u4E00\u4E2A\u96C6\u5408\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u540C\u65F6\u53C8\u901A\u8FC7\u96C6\u5408\u81EA\u8EAB\u7684\u65B9\u6CD5\uFF08\u5982`list.add()`, `map.remove()`\uFF09\u5BF9\u96C6\u5408\u7684\u7ED3\u6784\u8FDB\u884C\u4E86\u4FEE\u6539\uFF08\u6DFB\u52A0\u6216\u5220\u9664\u5143\u7D20\uFF09\u3002\",\n    \"score\": 3.5,\n    \"explanation\": \"\u7406\u89E3\u8FD9\u4E2A\u5F02\u5E38\u7684\u89E6\u53D1\u6761\u4EF6\u662F\u907F\u514D\u5728\u96C6\u5408\u904D\u5386\u4E2D\u8E29\u5751\u7684\u5173\u952E\u3002\u6839\u672C\u539F\u56E0\u5728\u4E8E\u8FED\u4EE3\u5668\u7EF4\u62A4\u7684\u72B6\u6001\uFF08\u5982`expectedModCount`\uFF09\u4E0E\u96C6\u5408\u7684\u5B9E\u9645\u72B6\u6001\uFF08`modCount`\uFF09\u4E0D\u4E00\u81F4\u4E86\u3002\"\n  },\n  {\n    \"id\": 17,\n    \"type\": \"code\",\n    \"question\": \"\u4EE5\u4E0B\u4EE3\u7801\u5728\u8FD0\u884C\u65F6\u4F1A\u629B\u51FA\u5F02\u5E38\u3002\u8BF7\u4FEE\u6539\u5B83\uFF0C\u4F7F\u5176\u80FD\u591F\u5728\u904D\u5386`List`\u65F6\u5B89\u5168\u5730\u5220\u9664\u6240\u6709\u5305\u542B\\\"bad\\\"\u7684\u5B57\u7B26\u4E32\u3002\",\n    \"code_prompt\": \"List<String> list = new ArrayList<>(Arrays.asList(\\\"good\\\", \\\"bad\\\", \\\"nice\\\", \\\"bad idea\\\"));\\nfor (String s : list) {\\n    if (s.contains(\\\"bad\\\")) {\\n        list.remove(s); \\n    }\\n}\",\n    \"answer\": \"List<String> list = new ArrayList<>(Arrays.asList(\\\"good\\\", \\\"bad\\\", \\\"nice\\\", \\\"bad idea\\\"));\\nIterator<String> iterator = list.iterator();\\nwhile (iterator.hasNext()) {\\n    String s = iterator.next();\\n    if (s.contains(\\\"bad\\\")) {\\n        iterator.remove(); // \u4F7F\u7528\u8FED\u4EE3\u5668\u7684remove\u65B9\u6CD5\\n    }\\n}\",\n    \"score\": 4,\n    \"explanation\": \"\u6B64\u9898\u662F`ConcurrentModificationException`\u7684\u7ECF\u5178\u573A\u666F\u3002\u6B63\u786E\u505A\u6CD5\u662F\u4F7F\u7528\u8FED\u4EE3\u5668\u81EA\u8EAB\u7684`remove()`\u65B9\u6CD5\u8FDB\u884C\u5220\u9664\uFF0C\u56E0\u4E3A\u8BE5\u65B9\u6CD5\u4F1A\u540C\u6B65\u96C6\u5408\u548C\u8FED\u4EE3\u5668\u4E24\u8005\u7684\u5185\u90E8\u72B6\u6001\uFF0C\u4ECE\u800C\u907F\u514D\u5F02\u5E38\u3002\"\n  },\n    {\n    \"id\": 18,\n    \"type\": \"multiple\",\n    \"question\": \"\u5173\u4E8E`Queue`\u63A5\u53E3\u4E2D\u7684`add`\u3001`offer`\u3001`put`\u4E09\u4E2A\u7528\u4E8E\u63D2\u5165\u5143\u7D20\u7684\u65B9\u6CD5\uFF0C\u4EE5\u4E0B\u63CF\u8FF0\u6B63\u786E\u7684\u6709\u54EA\u4E9B\uFF1F\",\n    \"options\": [\n      \"`add(e)`\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u629B\u51FA`IllegalStateException`\u5F02\u5E38\u3002\",\n      \"`offer(e)`\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u8FD4\u56DE`false`\uFF0C\u800C\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\u3002\",\n      \"`put(e)`\u662F`BlockingQueue`\u7279\u6709\u7684\u65B9\u6CD5\uFF0C\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u963B\u585E\u5F53\u524D\u7EBF\u7A0B\uFF0C\u76F4\u5230\u961F\u5217\u6709\u7A7A\u95F4\u3002\",\n      \"\u5728\u4EFB\u4F55\u60C5\u51B5\u4E0B\uFF0C\u8FD9\u4E09\u4E2A\u65B9\u6CD5\u7684\u884C\u4E3A\u90FD\u662F\u5B8C\u5168\u4E00\u6837\u7684\u3002\"\n    ],\n    \"answer\": [\n      \"`add(e)`\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u629B\u51FA`IllegalStateException`\u5F02\u5E38\u3002\",\n      \"`offer(e)`\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u8FD4\u56DE`false`\uFF0C\u800C\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\u3002\",\n      \"`put(e)`\u662F`BlockingQueue`\u7279\u6709\u7684\u65B9\u6CD5\uFF0C\u5728\u961F\u5217\u5DF2\u6EE1\u65F6\u4F1A\u963B\u585E\u5F53\u524D\u7EBF\u7A0B\uFF0C\u76F4\u5230\u961F\u5217\u6709\u7A7A\u95F4\u3002\"\n    ],\n    \"score\": 4,\n    \"explanation\": \"Queue\u63A5\u53E3\u4E3A\u589E\u5220\u67E5\u64CD\u4F5C\u63D0\u4F9B\u4E86\u4E09\u5957API\uFF0C\u5206\u522B\u5E94\u5BF9\u4E0D\u540C\u573A\u666F\u3002`add`\u7CFB\u5217\u662F\u201C\u66B4\u529B\u6D3E\u201D\uFF0C\u5931\u8D25\u5C31\u629B\u5F02\u5E38\uFF1B`offer`\u7CFB\u5217\u662F\u201C\u6E29\u67D4\u6D3E\u201D\uFF0C\u5931\u8D25\u8FD4\u56DE\u7279\u6B8A\u503C\uFF1B`put`/`take`\u7CFB\u5217\u662F\u201C\u963B\u585E\u6D3E\u201D\uFF0C\u4E13\u4E3A\u5E76\u53D1\u573A\u666F\u8BBE\u8BA1\u3002\u7406\u89E3\u5B83\u4EEC\u7684\u533A\u522B\u5BF9\u4E8E\u7F16\u5199\u5065\u58EE\u7684\u7A0B\u5E8F\u81F3\u5173\u91CD\u8981\u3002\"\n  },\n  {\n    \"id\": 19,\n    \"type\": \"multiple\",\n    \"question\": \"\u4E0E`Queue`\u7684\u63D2\u5165\u65B9\u6CD5\u7C7B\u4F3C\uFF0C\u5176\u79FB\u9664\u5143\u7D20\u7684`remove()`\u3001`poll()`\u3001`take()`\u65B9\u6CD5\u4E5F\u6709\u4E0D\u540C\u884C\u4E3A\u3002\u4EE5\u4E0B\u63CF\u8FF0\u6B63\u786E\u7684\u6709\u54EA\u4E9B\uFF1F\",\n    \"options\": [\n      \"`remove()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u629B\u51FA`NoSuchElementException`\u5F02\u5E38\u3002\",\n      \"`poll()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u8FD4\u56DE`null`\u3002\",\n      \"`take()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u963B\u585E\u7EBF\u7A0B\uFF0C\u76F4\u5230\u961F\u5217\u4E2D\u6709\u5143\u7D20\u53EF\u53D6\u3002\",\n      \"\u5BF9\u4E8E\u975E\u963B\u585E\u961F\u5217\uFF0C`remove()`\u548C`poll()`\u662F\u5B8C\u5168\u7B49\u4EF7\u7684\u3002\"\n    ],\n    \"answer\": [\n      \"`remove()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u629B\u51FA`NoSuchElementException`\u5F02\u5E38\u3002\",\n      \"`poll()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u8FD4\u56DE`null`\u3002\",\n      \"`take()`\u5728\u961F\u5217\u4E3A\u7A7A\u65F6\u4F1A\u963B\u585E\u7EBF\u7A0B\uFF0C\u76F4\u5230\u961F\u5217\u4E2D\u6709\u5143\u7D20\u53EF\u53D6\u3002\"\n    ],\n    \"score\": 4,\n    \"explanation\": \"\u8FD9\u8003\u5BDF\u4E86`Queue`\u4E09\u5957API\u4E2D\u7528\u4E8E\u79FB\u9664\u5143\u7D20\u7684\u65B9\u6CD5\u3002\u5728\u5B9E\u9645\u5F00\u53D1\u4E2D\uFF0C\u5C24\u5176\u662F\u5728\u9AD8\u5E76\u53D1\u6216\u9700\u8981\u5904\u7406\u8FB9\u754C\u6761\u4EF6\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u901A\u5E38\u4F1A\u9009\u62E9\u4F7F\u7528`poll()`\u6216`take()`\u6765\u907F\u514D\u7A0B\u5E8F\u56E0\u5F02\u5E38\u800C\u4E2D\u65AD\u3002\"\n  },\n  {\n    \"id\": 20,\n    \"type\": \"single\",\n    \"question\": \"\u5047\u8BBE\u4F60\u6B63\u5728\u5F00\u53D1\u4E00\u4E2A\u751F\u4EA7\u8005-\u6D88\u8D39\u8005\u6A21\u578B\uFF0C\u4F7F\u7528`ArrayBlockingQueue`\u4F5C\u4E3A\u5171\u4EAB\u7F13\u51B2\u533A\u3002\u5F53\u7F13\u51B2\u533A\u5DF2\u6EE1\u65F6\uFF0C\u4F60\u5E0C\u671B\u751F\u4EA7\u8005\u7EBF\u7A0B\u6682\u505C\u7B49\u5F85\uFF0C\u800C\u4E0D\u662F\u629B\u51FA\u5F02\u5E38\u6216\u7ACB\u5373\u8FD4\u56DE\u5931\u8D25\u3002\u4F60\u5E94\u8BE5\u4F7F\u7528\u54EA\u4E2A\u65B9\u6CD5\u6765\u653E\u5165\u5143\u7D20\uFF1F\",\n    \"options\": [\"add(e)\", \"offer(e)\", \"put(e)\", \"push(e)\"],\n    \"answer\": \"put(e)\",\n    \"score\": 3,\n    \"explanation\": \"\u6839\u636E\u7B14\u8BB0\u4E2D\u5BF9`ArrayBlockingQueue`\u7684\u63CF\u8FF0\uFF0C`put(e)`\u65B9\u6CD5\u6B63\u662F\u5728\u961F\u5217\u6EE1\u65F6\u63D0\u4F9B\u963B\u585E\u529F\u80FD\u7684API\uFF0C\u8FD9\u5B8C\u5168\u7B26\u5408\u751F\u4EA7\u8005-\u6D88\u8D39\u8005\u6A21\u578B\u4E2D\u751F\u4EA7\u8005\u9700\u8981\u7B49\u5F85\u7684\u573A\u666F\u3002\"\n  },\n    {\n    \"id\": 21,\n    \"type\": \"code\",\n    \"question\": \"\u8BF7\u7F16\u5199\u4E00\u4E2A`Comparator`\uFF0C\u7528\u4E8E\u5BF9\u4E00\u4E2A`List<String>`\u6309\u5B57\u7B26\u4E32\u957F\u5EA6\u8FDB\u884C\u964D\u5E8F\u6392\u5E8F\u3002\u5982\u679C\u957F\u5EA6\u76F8\u540C\uFF0C\u5219\u6309\u5B57\u5178\u5E8F\u5347\u5E8F\u6392\u5E8F\u3002\",\n    \"answer\": \"list.sort((s1, s2) -> {\\n    if (s1.length() != s2.length()) {\\n        return s2.length() - s1.length(); // \u957F\u5EA6\u964D\u5E8F\\n    } else {\\n        return s1.compareTo(s2); // \u5B57\u5178\u5E8F\u5347\u5E8F\\n    }\\n});\",\n    \"score\": 4.5,\n    \"explanation\": \"\u672C\u9898\u8003\u5BDF\u4E86`Comparator`\u63A5\u53E3\u7684\u7075\u6D3B\u8FD0\u7528\uFF0C\u6D89\u53CA\u4E24\u4E2A\u6392\u5E8F\u7EF4\u5EA6\uFF08\u4E3B\u3001\u6B21\u6392\u5E8F\u6761\u4EF6\uFF09\uFF0C\u662F\u5B9E\u9645\u5F00\u53D1\u4E2D\u5E38\u89C1\u7684\u81EA\u5B9A\u4E49\u6392\u5E8F\u573A\u666F\u3002\u4F7F\u7528Lambda\u8868\u8FBE\u5F0F\u662F\u73B0\u4EE3Java\u7684\u63A8\u8350\u5199\u6CD5\u3002\"\n  },\n  {\n    \"id\": 22,\n    \"type\": \"single\",\n    \"question\": \"\u5728\u4F7F\u7528`Arrays.binarySearch()`\u65B9\u6CD5\u8FDB\u884C\u4E8C\u5206\u67E5\u627E\u524D\uFF0C\u5BF9\u76EE\u6807\u6570\u7EC4\u6709\u4EC0\u4E48\u6837\u7684\u524D\u7F6E\u8981\u6C42\uFF1F\",\n    \"options\": [\n      \"\u6570\u7EC4\u5FC5\u987B\u662F`String`\u7C7B\u578B\u3002\",\n      \"\u6570\u7EC4\u5FC5\u987B\u5DF2\u7ECF\u6392\u597D\u5E8F\u3002\",\n      \"\u6570\u7EC4\u957F\u5EA6\u5FC5\u987B\u662F2\u7684\u5E42\u3002\",\n      \"\u6570\u7EC4\u4E0D\u80FD\u5305\u542B\u91CD\u590D\u5143\u7D20\u3002\"\n    ],\n    \"answer\": \"\u6570\u7EC4\u5FC5\u987B\u5DF2\u7ECF\u6392\u597D\u5E8F\u3002\",\n    \"score\": 2.5,\n    \"explanation\": \"\u4E8C\u5206\u67E5\u627E\u7B97\u6CD5\u7684\u6709\u6548\u6027\u5EFA\u7ACB\u5728\u6570\u636E\u6709\u5E8F\u7684\u57FA\u7840\u4E0A\u3002\u5982\u679C\u5728\u4E00\u4E2A\u672A\u6392\u5E8F\u7684\u6570\u7EC4\u4E0A\u6267\u884C`binarySearch`\uFF0C\u5176\u7ED3\u679C\u662F\u672A\u5B9A\u4E49\u7684\uFF0C\u53EF\u80FD\u4F1A\u8FD4\u56DE\u9519\u8BEF\u7684\u4F4D\u7F6E\u6216\u627E\u4E0D\u5230\u5B58\u5728\u7684\u5143\u7D20\u3002\"\n  },\n  {\n    \"id\": 23,\n    \"type\": \"single\",\n    \"question\": \"\u8C03\u7528`Map.put(K key, V value)`\u65B9\u6CD5\u65F6\uFF0C\u5982\u679C`key`\u5728Map\u4E2D\u5DF2\u7ECF\u5B58\u5728\uFF0C\u4F1A\u53D1\u751F\u4EC0\u4E48\uFF1F\",\n    \"options\": [\n      \"\u64CD\u4F5C\u5931\u8D25\uFF0C\u629B\u51FA\u5F02\u5E38\u3002\",\n      \"\u64CD\u4F5C\u5931\u8D25\uFF0C\u8FD4\u56DE`false`\u3002\",\n      \"\u65E7\u7684`value`\u88AB\u65B0\u7684`value`\u8986\u76D6\uFF0C\u65B9\u6CD5\u8FD4\u56DE\u65B0\u7684`value`\u3002\",\n      \"\u65E7\u7684`value`\u88AB\u65B0\u7684`value`\u8986\u76D6\uFF0C\u65B9\u6CD5\u8FD4\u56DE\u88AB\u8986\u76D6\u7684\u65E7`value`\u3002\"\n    ],\n    \"answer\": \"\u65E7\u7684`value`\u88AB\u65B0\u7684`value`\u8986\u76D6\uFF0C\u65B9\u6CD5\u8FD4\u56DE\u88AB\u8986\u76D6\u7684\u65E7`value`\u3002\",\n    \"score\": 2,\n    \"explanation\": \"\u8FD9\u662F`Map.put`\u65B9\u6CD5\u7684\u4E00\u4E2A\u91CD\u8981\u7279\u6027\u3002\u8FD4\u56DE\u65E7\u503C\u4F7F\u5F97\u8C03\u7528\u8005\u53EF\u4EE5\u77E5\u9053\u4E4B\u524D\u8BE5key\u5173\u8054\u7684\u503C\u662F\u4EC0\u4E48\uFF0C\u65B9\u4FBF\u8FDB\u884C\u4E00\u4E9B\u5982\u201C\u66F4\u65B0\u5E76\u8BB0\u5F55\u65E7\u503C\u201D\u7684\u903B\u8F91\u3002\"\n  },\n  {\n    \"id\": 24,\n    \"type\": \"short_answer\",\n    \"question\": \"\u5728\u4F7F\u7528\u589E\u5F3Afor\u5FAA\u73AF\uFF08for-each loop\uFF09\u904D\u5386\u4E00\u4E2AList\u65F6\uFF0C\u5176\u5E95\u5C42\u5B9E\u9645\u4E0A\u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF1F\u4E3A\u4EC0\u4E48\u5B83\u540C\u6837\u4F1A\u53D7\u5230`ConcurrentModificationException`\u7684\u5F71\u54CD\uFF1F\",\n    \"answer\": \"\u589E\u5F3Afor\u5FAA\u73AF\u5728\u5E95\u5C42\u5B9E\u9645\u4E0A\u662F\u4F9D\u8D56`Iterator`\uFF08\u8FED\u4EE3\u5668\uFF09\u5DE5\u4F5C\u7684\u3002\u7F16\u8BD1\u5668\u4F1A\u5C06\u589E\u5F3Afor\u5FAA\u73AF\u4EE3\u7801\u8F6C\u6362\u4E3A\u7B49\u6548\u7684\u4F7F\u7528`iterator()`\u65B9\u6CD5\u83B7\u53D6\u8FED\u4EE3\u5668\uFF0C\u7136\u540E\u5FAA\u73AF\u8C03\u7528`hasNext()`\u548C`next()`\u7684\u4EE3\u7801\u3002\u56E0\u4E3A\u5B83\u672C\u8D28\u4E0A\u5C31\u662F\u5728\u4F7F\u7528\u8FED\u4EE3\u5668\uFF0C\u6240\u4EE5\u5F53\u5728\u5FAA\u73AF\u4F53\u5185\u90E8\u901A\u8FC7\u96C6\u5408\u81EA\u8EAB\u7684\u65B9\u6CD5\u4FEE\u6539\u96C6\u5408\u65F6\uFF0C\u540C\u6837\u4F1A\u89E6\u53D1`ConcurrentModificationException`\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u7406\u89E3\u589E\u5F3Afor\u5FAA\u73AF\u7684\u8BED\u6CD5\u7CD6\u672C\u8D28\u6709\u52A9\u4E8E\u66F4\u6DF1\u523B\u5730\u7406\u89E3Java\u7684\u8FED\u4EE3\u673A\u5236\u548C\u5E76\u53D1\u4FEE\u6539\u5F02\u5E38\u7684\u6839\u6E90\u3002\"\n  },\n  {\n    \"id\": 25,\n    \"type\": \"single\",\n   \"question\": \"\u5982\u679C\u4E00\u4E2A\u81EA\u5B9A\u4E49\u7C7B\u53EA\u91CD\u5199\u4E86`equals()`\u65B9\u6CD5\uFF0C\u800C\u6CA1\u6709\u91CD\u5199`hashCode()`\u65B9\u6CD5\uFF0C\u5E76\u5C06\u5176\u5BF9\u8C61\u4F5C\u4E3A\u5143\u7D20\u6DFB\u52A0\u5230`HashSet`\u4E2D\uFF0C\u53EF\u80FD\u4F1A\u5BFC\u81F4\u4EC0\u4E48\u95EE\u9898\uFF1F\",\n    \"options\": [\n      \"\u7F16\u8BD1\u9519\u8BEF\u3002\",\n      \"\u8FD0\u884C\u65F6\u629B\u51FA`IllegalStateException`\u3002\",\n      \"\u4E24\u4E2A\u5185\u5BB9\u76F8\u7B49\uFF08`equals`\u8FD4\u56DE`true`\uFF09\u7684\u5BF9\u8C61\u53EF\u80FD\u90FD\u4F1A\u88AB\u6210\u529F\u6DFB\u52A0\u5230`HashSet`\u4E2D\u3002\",\n      \"\u6027\u80FD\u4E0B\u964D\uFF0C\u4F46\u529F\u80FD\u5B8C\u5168\u6B63\u5E38\u3002\"\n    ],\n    \"answer\": \"\u4E24\u4E2A\u5185\u5BB9\u76F8\u7B49\uFF08`equals`\u8FD4\u56DE`true`\uFF09\u7684\u5BF9\u8C61\u53EF\u80FD\u90FD\u4F1A\u88AB\u6210\u529F\u6DFB\u52A0\u5230`HashSet`\u4E2D\u3002\",\n    \"score\": 4,\n    \"explanation\": \"\u5982\u679C\u6CA1\u6709\u91CD\u5199`hashCode()`\uFF0C\u5B83\u5C06\u4F7F\u7528\u4ECE`Object`\u7C7B\u7EE7\u627F\u7684\u9ED8\u8BA4\u5B9E\u73B0\uFF0C\u8BE5\u5B9E\u73B0\u901A\u5E38\u57FA\u4E8E\u5185\u5B58\u5730\u5740\u751F\u6210\u54C8\u5E0C\u7801\u3002\u56E0\u6B64\uFF0C\u4E24\u4E2A\u5185\u5BB9\u76F8\u540C\u4F46\u5185\u5B58\u5730\u5740\u4E0D\u540C\u7684\u5BF9\u8C61\u4F1A\u6709\u4E0D\u540C\u7684\u54C8\u5E0C\u7801\uFF0C`HashSet`\u4F1A\u5C06\u5B83\u4EEC\u5B9A\u4F4D\u5230\u4E0D\u540C\u7684\u6876\u4E2D\uFF0C\u4ECE\u800C\u90FD\u6DFB\u52A0\u6210\u529F\uFF0C\u8FDD\u80CC\u4E86`Set`\u7684\u552F\u4E00\u6027\u539F\u5219\u3002\"\n  },\n  {\n    \"id\": 26,\n    \"type\": \"single\",\n    \"question\": \"\u6839\u636E`Comparator<T>`\u63A5\u53E3\u7684`compare(T o1, T o2)`\u65B9\u6CD5\u7684\u7EA6\u5B9A\uFF0C\u5982\u679C\u8981\u5B9E\u73B0\u5347\u5E8F\u6392\u5E8F\uFF0C\u5F53`o1`\u5E94\u8BE5\u6392\u5728`o2`\u524D\u9762\u65F6\uFF0C\u8BE5\u65B9\u6CD5\u5E94\u8BE5\u8FD4\u56DE\u4EC0\u4E48\uFF1F\",\n    \"options\": [\"\u6B63\u6574\u6570\", \"\u8D1F\u6574\u6570\", \"\u96F6\", \"true\"],\n    \"answer\": \"\u8D1F\u6574\u6570\",\n    \"score\": 3,\n    \"explanation\": \"\u8FD9\u662F`Comparator`\u63A5\u53E3\u7684\u6838\u5FC3\u7EA6\u5B9A\uFF1A\u8FD4\u56DE\u8D1F\u6570\u610F\u5473\u7740\u7B2C\u4E00\u4E2A\u53C2\u6570`o1`\u201C\u5C0F\u4E8E\u201D\u7B2C\u4E8C\u4E2A\u53C2\u6570`o2`\uFF0C\u5E94\u8BE5\u6392\u5728\u524D\u9762\uFF1B\u8FD4\u56DE\u6B63\u6570\u76F8\u53CD\uFF1B\u8FD4\u56DE\u96F6\u8868\u793A\u4E24\u8005\u76F8\u7B49\u3002\"\n  },\n  {\n    \"id\": 27,\n    \"type\": \"multiple\",\n    \"question\": \"`LinkedList`\u5B9E\u73B0\u4E86\u54EA\u4E9B\u91CD\u8981\u7684\u63A5\u53E3\uFF08\u6839\u636E\u7B14\u8BB0\u5185\u5BB9\uFF09\uFF1F\",\n    \"options\": [\"List\", \"Map\", \"Set\", \"Deque\"],\n    \"answer\": [\"List\", \"Deque\"],\n    \"score\": 2,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u660E\u786E\u6307\u51FA `LinkedList` \u662F `List` \u63A5\u53E3\u7684\u5B9E\u73B0\uFF0C\u540C\u65F6\u5B83\u4E5F\u5B9E\u73B0\u4E86 `Deque` (\u53CC\u7AEF\u961F\u5217) \u63A5\u53E3\uFF0C\u8FD9\u4F7F\u5F97\u5B83\u65E2\u6709\u5217\u8868\u7684\u7279\u6027\uFF0C\u4E5F\u5177\u5907\u961F\u5217\u548C\u6808\u7684\u80FD\u529B\u3002\"\n  },\n  {\n    \"id\": 28,\n    \"type\": \"short_answer\",\n    \"question\": \"\u8BF7\u63CF\u8FF0`ArrayList`\u548C`LinkedList`\u5728\u5185\u5B58\u5F00\u9500\u4E0A\u7684\u4E3B\u8981\u533A\u522B\u3002\",\n    \"answer\": \"`ArrayList`\u7684\u5185\u5B58\u5F00\u9500\u76F8\u5BF9\u8F83\u5C0F\u3002\u5B83\u53EA\u9700\u8981\u5B58\u50A8\u5143\u7D20\u672C\u8EAB\uFF0C\u4EE5\u53CA\u4E00\u4E9B\u989D\u5916\u7684\u5BB9\u91CF\u4FE1\u606F\u3002\u5176\u5185\u5B58\u662F\u8FDE\u7EED\u7684\u3002`LinkedList`\u7684\u5185\u5B58\u5F00\u9500\u8F83\u5927\uFF0C\u56E0\u4E3A\u5B83\u7684\u6BCF\u4E2A\u5143\u7D20\u90FD\u5305\u88C5\u5728\u4E00\u4E2A\u8282\u70B9\uFF08Node\uFF09\u5BF9\u8C61\u4E2D\uFF0C\u8BE5\u8282\u70B9\u9664\u4E86\u5B58\u50A8\u5143\u7D20\u6570\u636E\u5916\uFF0C\u8FD8\u9700\u989D\u5916\u5B58\u50A8\u6307\u5411\u524D\u4E00\u4E2A\u548C\u540E\u4E00\u4E2A\u8282\u70B9\u7684\u5F15\u7528\uFF08\u6307\u9488\uFF09\uFF0C\u8FD9\u589E\u52A0\u4E86\u989D\u5916\u7684\u5185\u5B58\u5360\u7528\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u5728\u5904\u7406\u5927\u91CF\u6570\u636E\u4E14\u5185\u5B58\u654F\u611F\u7684\u573A\u666F\u4E0B\uFF0C\u5185\u5B58\u5F00\u9500\u662F\u9009\u62E9\u96C6\u5408\u5B9E\u73B0\u65F6\u9700\u8981\u8003\u8651\u7684\u4E00\u4E2A\u56E0\u7D20\u3002\"\n  },\n  {\n    \"id\": 29,\n    \"type\": \"single\",\n    \"question\": \"\u6267\u884C`new ArrayList()`\u540E\uFF0C\u6B64\u65F6`ArrayList`\u7684\u5185\u90E8\u6570\u7EC4\u5BB9\u91CF\u662F\u591A\u5C11\uFF1F\",\n    \"options\": [\"10\", \"16\", \"0\", \"1\"],\n    \"answer\": \"0\",\n    \"score\": 2.5,\n    \"explanation\": \"\u6839\u636E\u7B14\u8BB0\uFF0CJDK 7\u53CA\u4EE5\u540E\u7684\u7248\u672C\uFF0C`new ArrayList()`\u4F1A\u521B\u5EFA\u4E00\u4E2A\u521D\u59CB\u5BB9\u91CF\u4E3A0\u7684\u7A7A\u5217\u8868\uFF08\u5185\u90E8\u6570\u7EC4\u662F\u4E00\u4E2A\u7A7A\u6570\u7EC4\uFF09\u3002\u5728\u7B2C\u4E00\u6B21\u8C03\u7528`add`\u65B9\u6CD5\u65F6\uFF0C\u624D\u4F1A\u8FDB\u884C\u7B2C\u4E00\u6B21\u6269\u5BB9\uFF0C\u901A\u5E38\u662F\u5206\u914D\u4E00\u4E2A\u5BB9\u91CF\u4E3A10\u7684\u6570\u7EC4\u3002\"\n  },\n  {\n    \"id\": 30,\n    \"type\": \"single\",\n    \"question\": \"`map.values()`\u65B9\u6CD5\u8FD4\u56DE\u7684\u662F\u4EC0\u4E48\u7C7B\u578B\uFF1F\",\n    \"options\": [\"List<V>\", \"Set<V>\", \"Collection<V>\", \"V[]\"],\n    \"answer\": \"Collection<V>\",\n    \"score\": 2,\n    \"explanation\": \"`map.values()`\u8FD4\u56DE\u4E00\u4E2A`Collection`\u89C6\u56FE\uFF0C\u56E0\u4E3A\u5B83\u53EA\u4FDD\u8BC1\u5305\u542B\u4E86map\u4E2D\u6240\u6709\u7684\u503C\uFF0C\u4F46\u4E0D\u4FDD\u8BC1\u987A\u5E8F\u6216\u552F\u4E00\u6027\uFF08\u4E0D\u540C\u7684key\u53EF\u4EE5\u6620\u5C04\u5230\u76F8\u540C\u7684value\uFF09\u3002\u56E0\u6B64\uFF0C\u4F7F\u7528\u6700\u6CDB\u5316\u7684`Collection`\u7C7B\u578B\u662F\u5408\u9002\u7684\u3002\"\n  },\n  {\n    \"id\": 31,\n    \"type\": \"short_answer\",\n    \"question\": \"\u4E3A\u4EC0\u4E48\u8BF4\u904D\u5386Map\u7684`entrySet()`\u662F\u6700\u9AD8\u6548\u7684\u65B9\u5F0F\uFF1F\u8BF7\u4ECE`HashMap`\u7684\u5B9E\u73B0\u89D2\u5EA6\u89E3\u91CA\u3002\",\n    \"answer\": \"\u56E0\u4E3A`HashMap`\u7684`entrySet()`\u8FD4\u56DE\u7684`Set`\u4E2D\uFF0C\u6BCF\u4E2A`Entry`\u5BF9\u8C61\u5DF2\u7ECF\u5305\u542B\u4E86\u952E\u548C\u503C\u3002\u904D\u5386\u65F6\uFF0C\u53EF\u4EE5\u76F4\u63A5\u4ECE`Entry`\u5BF9\u8C61\u4E2D\u83B7\u53D6`key`\u548C`value`\u3002\u76F8\u6BD4\u4E4B\u4E0B\uFF0C\u904D\u5386`keySet()`\u65F6\uFF0C\u5728\u5FAA\u73AF\u4F53\u5185\u90E8\u9700\u8981\u901A\u8FC7`map.get(key)`\u6765\u83B7\u53D6`value`\uFF0C\u8FD9\u4E2A`get`\u64CD\u4F5C\u9700\u8981\u6839\u636E`key`\u7684\u54C8\u5E0C\u503C\u518D\u6B21\u8FDB\u884C\u4E00\u6B21\u67E5\u627E\u5B9A\u4F4D\u8FC7\u7A0B\u3002\u56E0\u6B64\uFF0C\u904D\u5386`entrySet()`\u907F\u514D\u4E86\u8FD9\u6B21\u91CD\u590D\u7684\u67E5\u627E\uFF0C\u6548\u7387\u66F4\u9AD8\u3002\",\n    \"score\": 4,\n    \"explanation\": \"\u6B64\u9898\u8981\u6C42\u4ECE`HashMap`\u7684\u5B9E\u73B0\u7EC6\u8282\u6765\u89E3\u91CA\u6027\u80FD\u5DEE\u5F02\uFF0C\u8003\u5BDF\u5BF9`HashMap`\u5DE5\u4F5C\u539F\u7406\u7684\u7406\u89E3\u6DF1\u5EA6\u3002\"\n  },\n  {\n    \"id\": 32,\n    \"type\": \"single\",\n    \"question\": \"\u4E00\u4E2A`HashMap`\u5B9E\u4F8B\u4E2D\uFF0C\u53EF\u4EE5\u5B58\u5728\u591A\u5C11\u4E2A`null`\u4F5C\u4E3A`key`\uFF1F\",\n    \"options\": [\"0\u4E2A\", \"1\u4E2A\", \"\u65E0\u9650\u4E2A\", \"\u4E0D\u786E\u5B9A\uFF0C\u53D6\u51B3\u4E8EJDK\u7248\u672C\"],\n    \"answer\": \"1\u4E2A\",\n    \"score\": 2,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u660E\u786E\u63D0\u5230\uFF0C`HashMap`\u5141\u8BB8`key`\u548C`value`\u4E3A`null`\u3002\u7531\u4E8E`key`\u5FC5\u987B\u662F\u552F\u4E00\u7684\uFF0C\u6240\u4EE5\u6700\u591A\u53EA\u80FD\u6709\u4E00\u4E2A`key`\u4E3A`null`\u3002\u800C`value`\u53EF\u4EE5\u6709\u591A\u4E2A\u4E3A`null`\u3002\"\n  },\n  {\n    \"id\": 33,\n    \"type\": \"code\",\n    \"question\": \"\u7ED9\u5B9A\u4E00\u4E2A`ArrayList<Integer> list`\uFF0C\u8BF7\u4F7F\u7528`list.sort()`\u65B9\u6CD5\u548CLambda\u8868\u8FBE\u5F0F\u5BF9\u5176\u8FDB\u884C\u964D\u5E8F\u6392\u5E8F\u3002\",\n    \"answer\": \"list.sort((o1, o2) -> o2 - o1);\",\n    \"score\": 3,\n    \"explanation\": \"\u8003\u5BDF\u4F7F\u7528Lambda\u8868\u8FBE\u5F0F\u5FEB\u901F\u5B9E\u73B0`Comparator`\u63A5\u53E3\uFF0C\u8FD9\u662FJava 8\u4EE5\u540E\u63A8\u8350\u7684\u7B80\u6D01\u5199\u6CD5\u3002`o2 - o1`\u662F\u5B9E\u73B0Integer\u964D\u5E8F\u6392\u5E8F\u7684\u7ECF\u5178\u6280\u5DE7\u3002\"\n  },\n  {\n    \"id\": 34,\n    \"type\": \"multiple\",\n    \"question\": \"\u4EE5\u4E0B\u5173\u4E8E`Iterator`\u8FED\u4EE3\u5668\u7684\u8BF4\u6CD5\uFF0C\u54EA\u4E9B\u662F\u6B63\u786E\u7684\uFF1F\",\n    \"options\": [\n      \"`Iterator`\u662F\u904D\u5386\u96C6\u5408\u7684\u7EDF\u4E00\u6807\u51C6\u63A5\u53E3\u3002\",\n      \"\u8C03\u7528`next()`\u65B9\u6CD5\u4F1A\u8FD4\u56DE\u4E0B\u4E00\u4E2A\u5143\u7D20\uFF0C\u5E76\u4E14\u4F1A\u81EA\u52A8\u5C06\u5185\u90E8\u6307\u9488\u540E\u79FB\u3002\",\n      \"\u5728\u901A\u8FC7\u8FED\u4EE3\u5668\u904D\u5386\u96C6\u5408\u65F6\uFF0C\u53EF\u4EE5\u4F7F\u7528\u8FED\u4EE3\u5668\u81EA\u8EAB\u7684`remove()`\u65B9\u6CD5\u5B89\u5168\u5730\u5220\u9664\u5143\u7D20\u3002\",\n      \"\u6240\u6709\u7684`Collection`\u5B9E\u73B0\u7C7B\u90FD\u5FC5\u987B\u5B9E\u73B0`Iterator`\u63A5\u53E3\u3002\"\n    ],\n    \"answer\": [\n      \"`Iterator`\u662F\u904D\u5386\u96C6\u5408\u7684\u7EDF\u4E00\u6807\u51C6\u63A5\u53E3\u3002\",\n      \"\u8C03\u7528`next()`\u65B9\u6CD5\u4F1A\u8FD4\u56DE\u4E0B\u4E00\u4E2A\u5143\u7D20\uFF0C\u5E76\u4E14\u4F1A\u81EA\u52A8\u5C06\u5185\u90E8\u6307\u9488\u540E\u79FB\u3002\",\n      \"\u5728\u901A\u8FC7\u8FED\u4EE3\u5668\u904D\u5386\u96C6\u5408\u65F6\uFF0C\u53EF\u4EE5\u4F7F\u7528\u8FED\u4EE3\u5668\u81EA\u8EAB\u7684`remove()`\u65B9\u6CD5\u5B89\u5168\u5730\u5220\u9664\u5143\u7D20\u3002\"\n    ],\n    \"score\": 3.5,\n    \"explanation\": \"\u9009\u9879D\u662F\u9519\u8BEF\u7684\u3002`Collection`\u7684\u5B9E\u73B0\u7C7B\u5E76\u672A\u76F4\u63A5\u5B9E\u73B0`Iterator`\u63A5\u53E3\uFF0C\u800C\u662F\u63D0\u4F9B\u4E86\u4E00\u4E2A`iterator()`\u65B9\u6CD5\u6765\u8FD4\u56DE\u4E00\u4E2A`Iterator`\u7684\u5B9E\u4F8B\u3002\u5176\u4ED6\u4E09\u9879\u90FD\u662F\u5BF9`Iterator`\u6838\u5FC3\u529F\u80FD\u548C\u7528\u6CD5\u7684\u6B63\u786E\u63CF\u8FF0\u3002\"\n  },\n  {\n    \"id\": 35,\n    \"type\": \"single\",\n    \"question\": \"\u5982\u679C`HashMap`\u7684key\u662F\u4E00\u4E2A\u81EA\u5B9A\u4E49\u5BF9\u8C61\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u5BF9\u8C61\u5FC5\u987B\u6EE1\u8DB3\u4EC0\u4E48\u6761\u4EF6\u624D\u80FD\u4FDD\u8BC1`HashMap`\u7684\u6B63\u5E38\u5DE5\u4F5C\uFF1F\",\n    \"options\": [\n      \"\u5FC5\u987B\u5B9E\u73B0`Comparable`\u63A5\u53E3\u3002\",\n      \"\u5FC5\u987B\u662F\u4E0D\u53EF\u53D8\u5BF9\u8C61\uFF08Immutable\uFF09\u3002\",\n      \"\u5FC5\u987B\u6B63\u786E\u5730\u91CD\u5199`hashCode()`\u548C`equals()`\u65B9\u6CD5\u3002\",\n      \"\u5FC5\u987B\u6709\u4E00\u4E2A\u65E0\u53C2\u6784\u9020\u51FD\u6570\u3002\"\n    ],\n    \"answer\": \"\u5FC5\u987B\u6B63\u786E\u5730\u91CD\u5199`hashCode()`\u548C`equals()`\u65B9\u6CD5\u3002\",\n    \"score\": 3,\n    \"explanation\": \"\u4E0E`HashSet`\u4E00\u6837\uFF0C`HashMap`\u901A\u8FC7key\u7684`hashCode()`\u548C`equals()`\u6765\u5B9A\u4F4D\u548C\u533A\u5206\u4E0D\u540C\u7684\u6761\u76EE\u3002\u4E3A\u4E86\u786E\u4FDD\u80FD\u591F\u6B63\u786E\u5730\u5B58\u53D6\u952E\u503C\u5BF9\uFF0C\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u5FC5\u987B\u88AB\u6B63\u786E\u91CD\u5199\u3002\u867D\u7136\u5C06\u4E0D\u53EF\u53D8\u5BF9\u8C61\u7528\u4F5Ckey\u662F\u6700\u4F73\u5B9E\u8DF5\uFF0C\u4F46\u4E0D\u662F\u5F3A\u5236\u8981\u6C42\u3002\"\n  },\n  {\n    \"id\": 36,\n    \"type\": \"single\",\n    \"question\": \"\u5728Java\u4E2D\uFF0C\u5982\u679C\u4E00\u4E2A\u65B9\u6CD5\u9700\u8981\u63A5\u6536\u4E00\u4E2A`List`\uFF0C\u8FD9\u4E2A`List`\u4E2D\u53EF\u4EE5\u5B58\u653E`Integer`\u6216\u4EFB\u4F55`Integer`\u7684\u7236\u7C7B\u578B\uFF08\u5982`Number`, `Object`\uFF09\uFF0C\u90A3\u4E48\u8BE5\u65B9\u6CD5\u7684\u53C2\u6570\u7C7B\u578B\u5E94\u8BE5\u5982\u4F55\u58F0\u660E\uFF1F\",\n    \"options\": [\n      \"`List<Number> list`\",\n      \"`List<? extends Number> list`\",\n      \"`List<? super Integer> list`\",\n      \"`List<Object> list`\"\n    ],\n    \"answer\": \"`List<? super Integer> list`\",\n    \"score\": 4.5,\n    \"explanation\": \"\u8FD9\u662F\u4E00\u4E2A\u5173\u4E8E\u6CDB\u578B\u901A\u914D\u7B26\u7684\u8FDB\u9636\u95EE\u9898\uFF0C\u867D\u7136\u7B14\u8BB0\u4E2D\u6CA1\u6709\u76F4\u63A5\u8BB2\u6388\u901A\u914D\u7B26\uFF0C\u4F46\u662F\u57FA\u4E8E\u201C\u6CDB\u578B\u4E0D\u5177\u6709\u591A\u6001\u6027\u201D\u7684\u6982\u5FF5\u5EF6\u4F38\u800C\u6765\u3002`? super Integer`\u8868\u793A\u4E00\u4E2A\u672A\u77E5\u7C7B\u578B\uFF0C\u8FD9\u4E2A\u7C7B\u578B\u662F`Integer`\u672C\u8EAB\u6216\u8005\u5176\u4EFB\u4F55\u7236\u7C7B\u578B\uFF0C\u7B26\u5408\u9898\u610F\u3002\u8FD9\u8003\u5BDF\u4E86\u5BF9\u6CDB\u578B\u66F4\u6DF1\u5C42\u6B21\u7684\u7406\u89E3\uFF08PECS\u539F\u5219\uFF1AProducer-Extends, Consumer-Super\uFF09\u3002\"\n  },\n  {\n    \"id\": 37,\n    \"type\": \"short_answer\",\n    \"question\": \"\u8BF7\u89E3\u91CA`ArrayList`\u7684`remove(int index)`\u548C`remove(Object o)`\u4E24\u4E2A\u91CD\u8F7D\u65B9\u6CD5\u4E4B\u95F4\u7684\u533A\u522B\u548C\u6F5C\u5728\u7684\u9677\u9631\u3002\",\n    \"answer\": \"`remove(int index)`\u662F\u6309\u7D22\u5F15\u5220\u9664\uFF0C\u5B83\u4F1A\u5220\u9664\u6307\u5B9A\u4F4D\u7F6E\u7684\u5143\u7D20\u5E76\u8FD4\u56DE\u88AB\u5220\u9664\u7684\u5143\u7D20\u3002`remove(Object o)`\u662F\u6309\u5185\u5BB9\u5220\u9664\uFF0C\u5B83\u4F1A\u5220\u9664\u96C6\u5408\u4E2D\u4E0E\u5BF9\u8C61`o`\u76F8\u7B49\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u5E03\u5C14\u503C\uFF08`true`\u8868\u793A\u5220\u9664\u6210\u529F\uFF09\u3002\u6F5C\u5728\u7684\u9677\u9631\u662F\u5F53`ArrayList`\u4E2D\u5B58\u50A8\u7684\u662F`Integer`\u7C7B\u578B\u65F6\uFF0C\u5982\u679C\u8C03\u7528`list.remove(10)`\uFF0C\u7F16\u8BD1\u5668\u4F1A\u4F18\u5148\u5339\u914D`remove(int index)`\uFF0C\u610F\u56FE\u662F\u5220\u9664\u7D22\u5F15\u4E3A10\u7684\u5143\u7D20\uFF0C\u800C\u4E0D\u662F\u5185\u5BB9\u4E3A10\u7684\u5143\u7D20\u3002\u5982\u679C\u60F3\u6309\u5185\u5BB9\u5220\u9664\uFF0C\u5FC5\u987B\u4F20\u9012\u4E00\u4E2A`Integer`\u5BF9\u8C61\uFF0C\u5982`list.remove(Integer.valueOf(10))`\u3002\",\n    \"score\": 4,\n    \"explanation\": \"\u8FD9\u4E2A\u95EE\u9898\u8003\u5BDF\u4E86\u5BF9`ArrayList` API\u7EC6\u8282\u7684\u638C\u63E1\uFF0C\u7279\u522B\u662F\u5728\u5904\u7406`Integer`\u96C6\u5408\u65F6\u7531\u4E8E\u81EA\u52A8\u88C5\u7BB1/\u62C6\u7BB1\u53EF\u80FD\u5F15\u53D1\u7684\u6B67\u4E49\u548C\u9519\u8BEF\uFF0C\u975E\u5E38\u5177\u6709\u5B9E\u8DF5\u6027\u3002\"\n  },\n  {\n    \"id\": 38,\n    \"type\": \"single\",\n    \"question\": \"`Queue`\u63A5\u53E3\u9075\u5FAA\u7684\u57FA\u672C\u539F\u5219\u662F\u4EC0\u4E48\uFF1F\",\n    \"options\": [\"\u540E\u8FDB\u5148\u51FA (LIFO)\", \"\u5148\u8FDB\u5148\u51FA (FIFO)\", \"\u65E0\u5E8F\", \"\u6309\u4F18\u5148\u7EA7\"],\n    \"answer\": \"\u5148\u8FDB\u5148\u51FA (FIFO)\",\n    \"score\": 1.5,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u660E\u786E\u5B9A\u4E49\uFF0CQueue (\u961F\u5217) \u662F\u4E00\u79CD\u9075\u5FAA\u5148\u8FDB\u5148\u51FA (FIFO, First-In-First-Out) \u539F\u5219\u7684\u7279\u6B8A\u7EBF\u6027\u8868\u3002\"\n  },\n  {\n    \"id\": 39,\n    \"type\": \"single\",\n    \"question\": \"\u4EE5\u4E0B\u54EA\u4E2A\u64CD\u4F5C\u5728`LinkedList`\u4E0A\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u662FO(n)\uFF1F\",\n    \"options\": [\n      \"`addFirst(e)`\",\n      \"`removeLast()`\",\n      \"`get(int index)`\",\n      \"`add(e)` (\u5373 addLast)\"\n    ],\n    \"answer\": \"`get(int index)`\",\n    \"score\": 2.5,\n    \"explanation\": \"`LinkedList`\u7531\u4E8E\u662F\u94FE\u8868\u7ED3\u6784\uFF0C\u65E0\u6CD5\u76F4\u63A5\u901A\u8FC7\u8BA1\u7B97\u5185\u5B58\u5730\u5740\u504F\u79FB\u6765\u8BBF\u95EE\u5143\u7D20\uFF0C\u968F\u673A\u8BBF\u95EE`get(index)`\u9700\u8981\u4ECE\u5934\u6216\u5C3E\u5F00\u59CB\u904D\u5386\uFF0C\u76F4\u5230\u627E\u5230\u7B2Cindex\u4E2A\u8282\u70B9\uFF0C\u6240\u4EE5\u65F6\u95F4\u590D\u6742\u5EA6\u662FO(n)\u3002\u800C\u5934\u5C3E\u64CD\u4F5C\u90FD\u662FO(1)\u3002\"\n  },\n  {\n    \"id\": 40,\n    \"type\": \"short_answer\",\n    \"question\": \"`Iterator`\u7684`remove()`\u65B9\u6CD5\u4E3A\u4EC0\u4E48\u662F\u5B89\u5168\u7684\uFF0C\u800C\u96C6\u5408\u7684`remove()`\u65B9\u6CD5\u5728\u8FED\u4EE3\u65F6\u4F1A\u4E0D\u5B89\u5168\uFF1F\u8BF7\u4ECE`modCount`\u7684\u89D2\u5EA6\u89E3\u91CA\u3002\",\n    \"answer\": \"\u96C6\u5408\u5185\u90E8\u6709\u4E00\u4E2A`modCount`\u53D8\u91CF\uFF0C\u8BB0\u5F55\u96C6\u5408\u7ED3\u6784\u88AB\u4FEE\u6539\u7684\u6B21\u6570\u3002\u5F53\u521B\u5EFA\u8FED\u4EE3\u5668\u65F6\uFF0C\u8FED\u4EE3\u5668\u4F1A\u4FDD\u5B58\u4E00\u4EFD\u5F53\u524D\u96C6\u5408\u7684`modCount`\u503C\uFF08\u79F0\u4E3A`expectedModCount`\uFF09\u3002\u5728\u8FED\u4EE3\u8FC7\u7A0B\u4E2D\uFF0C\u5982\u679C\u901A\u8FC7\u96C6\u5408\u81EA\u8EAB\u7684`remove()`\u65B9\u6CD5\u4FEE\u6539\u4E86\u96C6\u5408\uFF0C\u53EA\u4F1A\u589E\u52A0\u96C6\u5408\u7684`modCount`\uFF0C\u800C\u8FED\u4EE3\u5668\u7684`expectedModCount`\u6CA1\u6709\u53D8\u3002\u4E0B\u4E00\u6B21\u8FED\u4EE3\u5668\u64CD\u4F5C\uFF08\u5982`next()`\uFF09\u4F1A\u68C0\u67E5\u5230`modCount != expectedModCount`\uFF0C\u4E8E\u662F\u629B\u51FA`ConcurrentModificationException`\u3002\\n\u800C`Iterator.remove()`\u65B9\u6CD5\u662F\u5B89\u5168\u7684\uFF0C\u56E0\u4E3A\u5B83\u5728\u5185\u90E8\u5220\u9664\u5143\u7D20\u7684\u540C\u65F6\uFF0C\u4F1A\u4E3B\u52A8\u66F4\u65B0\u8FED\u4EE3\u5668\u81EA\u8EAB\u7684`expectedModCount`\u4F7F\u5176\u4E0E\u96C6\u5408\u7684`modCount`\u4FDD\u6301\u540C\u6B65\uFF0C\u6240\u4EE5\u4E0D\u4F1A\u89E6\u53D1\u5F02\u5E38\u3002\",\n    \"score\": 4.5,\n    \"explanation\": \"\u8FD9\u662F\u5BF9\u5E76\u53D1\u4FEE\u6539\u5F02\u5E38\u5E95\u5C42\u673A\u5236\u7684\u6DF1\u5EA6\u8003\u5BDF\uFF0C\u80FD\u56DE\u7B54\u8FD9\u4E2A\u95EE\u9898\u8BF4\u660E\u5BF9`Iterator`\u7684\u5DE5\u4F5C\u539F\u7406\u6709\u975E\u5E38\u6E05\u6670\u7684\u8BA4\u8BC6\u3002\"\n  },\n  {\n    \"id\": 41,\n    \"type\": \"multiple\",\n    \"question\": \"`java.util.Arrays`\u5DE5\u5177\u7C7B\u63D0\u4F9B\u4E86\u54EA\u4E9B\u5E38\u7528\u529F\u80FD\uFF1F\",\n    \"options\": [\n      \"`toString(array)`: \u5C06\u6570\u7EC4\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\u3002\",\n      \"`sort(array)`: \u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\u3002\",\n      \"`binarySearch(array, key)`: \u5728\u6709\u5E8F\u6570\u7EC4\u4E2D\u8FDB\u884C\u4E8C\u5206\u67E5\u627E\u3002\",\n      \"`toList(array)`: \u76F4\u63A5\u5C06\u4EFB\u4F55\u6570\u7EC4\u9AD8\u6548\u8F6C\u6362\u4E3A`ArrayList`\u3002\"\n    ],\n    \"answer\": [\n      \"`toString(array)`: \u5C06\u6570\u7EC4\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\u3002\",\n      \"`sort(array)`: \u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\u3002\",\n      \"`binarySearch(array, key)`: \u5728\u6709\u5E8F\u6570\u7EC4\u4E2D\u8FDB\u884C\u4E8C\u5206\u67E5\u627E\u3002\"\n    ],\n    \"score\": 3,\n    \"explanation\": \"`Arrays`\u7C7B\u6CA1\u6709`toList()`\u65B9\u6CD5\u3002\u5C06\u6570\u7EC4\u8F6C\u4E3AList\u901A\u5E38\u4F7F\u7528`Arrays.asList()`\uFF0C\u4F46\u5B83\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A\u5185\u90E8\u7C7B\u7684`List`\uFF0C\u8BE5`List`\u957F\u5EA6\u56FA\u5B9A\uFF0C\u4E0D\u652F\u6301`add`\u6216`remove`\u64CD\u4F5C\u3002\u6240\u4EE5\u9009\u9879D\u63CF\u8FF0\u4E0D\u51C6\u786E\u3002\"\n  },\n  {\n    \"id\": 42,\n    \"type\": \"single\",\n    \"question\": \"\u5BF9\u4E8E\u4E00\u4E2A\u5DF2\u7ECF\u5B58\u50A8\u4E861000\u4E2A\u5143\u7D20\u7684`ArrayList`\uFF0C\u5728\u5217\u8868\u7684\u8D77\u59CB\u4F4D\u7F6E\uFF08\u7D22\u5F150\uFF09\u63D2\u5165\u4E00\u4E2A\u65B0\u5143\u7D20\uFF0C\u5927\u7EA6\u9700\u8981\u6267\u884C\u591A\u5C11\u6B21\u5143\u7D20\u79FB\u52A8\u64CD\u4F5C\uFF1F\",\n    \"options\": [\"1\u6B21\", \"2\u6B21\", \"1000\u6B21\", \"\u4E0D\u9700\u8981\u79FB\u52A8\"],\n    \"answer\": \"1000\u6B21\",\n    \"score\": 3,\n    \"explanation\": \"\u5728`ArrayList`\u7684\u8D77\u59CB\u4F4D\u7F6E\u63D2\u5165\u5143\u7D20\uFF0C\u4E3A\u4E86\u7ED9\u65B0\u5143\u7D20\u817E\u51FA\u7A7A\u95F4\uFF0C\u539F\u6709\u7684\u6240\u67091000\u4E2A\u5143\u7D20\u90FD\u9700\u8981\u5411\u540E\u79FB\u52A8\u4E00\u4F4D\u3002\u8FD9\u662F\u4E00\u4E2A\u5178\u578B\u7684O(n)\u64CD\u4F5C\uFF0Cn\u662F\u96C6\u5408\u7684\u5927\u5C0F\u3002\"\n  },\n  {\n    \"id\": 43,\n    \"type\": \"single\",\n    \"question\": \"\u4EE5\u4E0B\u54EA\u79CD\u96C6\u5408\u5B9E\u73B0\u7C7B\u5728\u8FED\u4EE3\u65F6\u80FD\u4FDD\u8BC1\u5143\u7D20\u7684\u987A\u5E8F\u4E0E\u5176\u63D2\u5165\u65F6\u7684\u987A\u5E8F\u4E00\u81F4\uFF1F\",\n    \"options\": [\"HashSet\", \"HashMap\", \"ArrayList\", \"TreeSet\"],\n    \"answer\": \"ArrayList\",\n    \"score\": 2,\n    \"explanation\": \"`ArrayList`\u548C`LinkedList`\u90FD\u5C5E\u4E8E`List`\uFF0C\u4FDD\u8BC1\u4E86\u5143\u7D20\u7684\u63D2\u5165\u987A\u5E8F\u3002`HashSet`\u548C`HashMap`\u662F\u65E0\u5E8F\u7684\u3002`TreeSet`\u548C`TreeMap`\u4F1A\u6839\u636E\u5143\u7D20\u7684\u81EA\u7136\u987A\u5E8F\u6216\u6307\u5B9A\u7684`Comparator`\u8FDB\u884C\u6392\u5E8F\uFF0C\u800C\u4E0D\u662F\u63D2\u5165\u987A\u5E8F\u3002\uFF08\u6CE8\uFF1A`LinkedHashSet`\u548C`LinkedHashMap`\u53EF\u4EE5\u4FDD\u8BC1\u63D2\u5165\u987A\u5E8F\uFF0C\u4F46\u7B14\u8BB0\u672A\u63D0\u53CA\uFF09\"\n  },\n  {\n    \"id\": 44,\n    \"type\": \"code\",\n    \"question\": \"\u5982\u679C\u6709\u4E00\u4E2A`User`\u7C7B\uFF0C\u5305\u542B`id`\u548C`name`\u5C5E\u6027\u3002\u8BF7\u91CD\u5199\u5176`equals()`\u65B9\u6CD5\uFF0C\u4F7F\u5F97\u53EA\u6709\u5F53`id`\u548C`name`\u90FD\u76F8\u540C\u65F6\uFF0C\u4E24\u4E2A`User`\u5BF9\u8C61\u624D\u88AB\u8BA4\u4E3A\u662F\u76F8\u7B49\u7684\u3002\",\n    \"answer\": \"@Override\\npublic boolean equals(Object obj) {\\n    if (this == obj) return true;\\n    if (obj == null || getClass() != obj.getClass()) return false;\\n    User otherUser = (User) obj;\\n    return this.id == otherUser.id && java.util.Objects.equals(this.name, otherUser.name);\\n}\",\n    \"score\": 3.5,\n    \"explanation\": \"\u8003\u5BDF`equals`\u65B9\u6CD5\u7684\u6807\u51C6\u5199\u6CD5\uFF0C\u5305\u62EC\u5730\u5740\u6BD4\u8F83\u3001null\u68C0\u67E5\u548C\u7C7B\u578B\u68C0\u67E5\u7B49\u524D\u7F6E\u5224\u65AD\u3002\u4F7F\u7528`Objects.equals()`\u6765\u5904\u7406`name`\u53EF\u80FD\u4E3Anull\u7684\u60C5\u51B5\uFF0C\u662F\u66F4\u5065\u58EE\u7684\u5199\u6CD5\u3002\"\n  },\n  {\n    \"id\": 45,\n    \"type\": \"short_answer\",\n    \"question\": \"\u6CDB\u578B\u4E2D\u7684\u201C\u7C7B\u578B\u64E6\u9664\u201D\uFF08Type Erasure\uFF09\u662F\u4EC0\u4E48\u610F\u601D\uFF1F\u5B83\u5BF9Java\u7684\u6CDB\u578B\u5B9E\u73B0\u610F\u5473\u7740\u4EC0\u4E48\uFF1F\",\n    \"answer\": \"\u7C7B\u578B\u64E6\u9664\u662F\u6307Java\u6CDB\u578B\u4FE1\u606F\u53EA\u5B58\u5728\u4E8E\u4EE3\u7801\u7684\u7F16\u8BD1\u9636\u6BB5\uFF0C\u5728\u751F\u6210\u7684\u5B57\u8282\u7801\u4E2D\uFF0C\u6240\u6709\u7684\u6CDB\u578B\u7C7B\u578B\u53C2\u6570\u90FD\u4F1A\u88AB\u66FF\u6362\u4E3A\u5B83\u4EEC\u7684\u4E0A\u754C\uFF08\u5982`T`\u88AB\u66FF\u6362\u4E3A`Object`\uFF0C`T extends Number`\u88AB\u66FF\u6362\u4E3A`Number`\uFF09\uFF0C\u5E76\u63D2\u5165\u5FC5\u8981\u7684\u7C7B\u578B\u8F6C\u6362\u4EE3\u7801\u3002\u8FD9\u610F\u5473\u7740\uFF0C\u5BF9\u4E8EJVM\u6765\u8BF4\uFF0C`ArrayList<String>`\u548C`ArrayList<Integer>`\u5728\u8FD0\u884C\u65F6\u662F\u540C\u4E00\u4E2A\u7C7B\uFF08`ArrayList.class`\uFF09\uFF0C\u5B83\u5E76\u4E0D\u77E5\u9053\u96C6\u5408\u4E2D\u5143\u7D20\u7684\u786E\u5207\u6CDB\u578B\u7C7B\u578B\u3002\",\n    \"score\": 4,\n    \"explanation\": \"\u867D\u7136\u7B14\u8BB0\u4E2D\u53EA\u63D0\u5230\u4E86\u6CDB\u578B\u662F\u7F16\u8BD1\u671F\u673A\u5236\uFF0C\u4F46\u7406\u89E3\u7C7B\u578B\u64E6\u9664\u662F\u6DF1\u5165\u7406\u89E3\u6CDB\u578B\u672C\u8D28\u7684\u5173\u952E\u3002\u8FD9\u4E2A\u95EE\u9898\u8003\u5BDF\u4E86\u5BF9\u8FD9\u4E00\u6838\u5FC3\u6982\u5FF5\u7684\u8BA4\u77E5\u3002\"\n  },\n  {\n    \"id\": 46,\n    \"type\": \"single\",\n    \"question\": \"\u5F53\u4E0D\u518D\u63A8\u8350\u4F7F\u7528`Hashtable`\u65F6\uFF0C\u5982\u679C\u9700\u8981\u4E00\u4E2A\u7EBF\u7A0B\u5B89\u5168\u7684`Map`\u5B9E\u73B0\uFF0C\u5E94\u8BE5\u4F18\u5148\u9009\u62E9\u54EA\u4E2A\u7C7B\uFF1F\",\n    \"options\": [\"Collections.synchronizedMap(new HashMap())\", \"ConcurrentHashMap\", \"TreeMap\", \"\u81EA\u5DF1\u7528`synchronized`\u5173\u952E\u5B57\u5305\u88C5HashMap\u7684\u6240\u6709\u65B9\u6CD5\"],\n    \"answer\": \"ConcurrentHashMap\",\n    \"score\": 3,\n    \"explanation\": \"\u7B14\u8BB0\u4E2D\u63D0\u5230\uFF0C`ConcurrentHashMap`\u63D0\u4F9B\u4E86\u6BD4`Hashtable`\u66F4\u597D\u7684\u5E76\u53D1\u6027\u80FD\u3002`ConcurrentHashMap`\u4F7F\u7528\u4E86\u66F4\u5148\u8FDB\u7684\u9501\u673A\u5236\uFF08\u5982\u5206\u6BB5\u9501\u6216CAS\uFF09\uFF0C\u5728\u9AD8\u5E76\u53D1\u573A\u666F\u4E0B\uFF0C\u5176\u541E\u5410\u91CF\u8FDC\u8D85\u4E8E\u5BF9\u6574\u4E2A`Map`\u8FDB\u884C\u540C\u6B65\u7684`Hashtable`\u6216`Collections.synchronizedMap`\u3002\"\n  },\n  {\n    \"id\": 47,\n    \"type\": \"multiple\",\n    \"question\": \"\u4EE5\u4E0B\u5173\u4E8E`HashSet`\u7684\u8BF4\u6CD5\uFF0C\u54EA\u4E9B\u662F\u6B63\u786E\u7684\uFF1F\",\n    \"options\": [\n      \"\u5B83\u4E0D\u5141\u8BB8\u5B58\u50A8\u91CD\u590D\u7684\u5143\u7D20\u3002\",\n      \"\u5B83\u901A\u5E38\u4E0D\u4FDD\u8BC1\u5143\u7D20\u7684\u5B58\u50A8\u548C\u53D6\u51FA\u987A\u5E8F\u3002\",\n      \"\u5B83\u5141\u8BB8\u5B58\u50A8\u4E00\u4E2A`null`\u5143\u7D20\u3002\",\n      \"\u5B83\u7684\u6240\u6709\u64CD\u4F5C\u90FD\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\u3002\"\n    ],\n    \"answer\": [\n      \"\u5B83\u4E0D\u5141\u8BB8\u5B58\u50A8\u91CD\u590D\u7684\u5143\u7D20\u3002\",\n      \"\u5B83\u901A\u5E38\u4E0D\u4FDD\u8BC1\u5143\u7D20\u7684\u5B58\u50A8\u548C\u53D6\u51FA\u987A\u5E8F\u3002\",\n      \"\u5B83\u5141\u8BB8\u5B58\u50A8\u4E00\u4E2A`null`\u5143\u7D20\u3002\"\n    ],\n    \"score\": 3,\n    \"explanation\": \"`HashSet`\u7684\u6838\u5FC3\u7279\u6027\u5C31\u662F\u65E0\u5E8F\u3001\u552F\u4E00\uFF0C\u5E76\u5141\u8BB8\u4E00\u4E2Anull\u3002\u4E0E`HashMap`\u4E00\u6837\uFF0C\u5B83\u672C\u8EAB\u662F\u975E\u7EBF\u7A0B\u5B89\u5168\u7684\u3002\u9700\u8981\u7EBF\u7A0B\u5B89\u5168\u7684Set\u53EF\u4EE5\u4F7F\u7528`Collections.synchronizedSet()`\u6216`ConcurrentHashMap.newKeySet()`\u3002\"\n  },\n  {\n    \"id\": 48,\n    \"type\": \"single\",\n    \"question\": \"\u5982\u679C\u4E00\u4E2A`ArrayList`\u7684`remove(Object o)`\u65B9\u6CD5\u88AB\u8C03\u7528\uFF0C\u5B83\u4F1A\u5982\u4F55\u67E5\u627E\u8981\u5220\u9664\u7684\u5143\u7D20\uFF1F\",\n    \"options\": [\n      \"\u4F7F\u7528\u4E8C\u5206\u67E5\u627E\u3002\",\n      \"\u901A\u8FC7\u54C8\u5E0C\u5B9A\u4F4D\u3002\",\n      \"\u4ECE\u5934\u5230\u5C3E\u4F9D\u6B21\u904D\u5386\uFF0C\u4F7F\u7528`equals()`\u65B9\u6CD5\u8FDB\u884C\u6BD4\u8F83\u3002\",\n      \"\u4ECE\u5C3E\u5230\u5934\u4F9D\u6B21\u904D\u5386\uFF0C\u4F7F\u7528`==`\u8FDB\u884C\u6BD4\u8F83\u3002\"\n    ],\n    \"answer\": \"\u4ECE\u5934\u5230\u5C3E\u4F9D\u6B21\u904D\u5386\uFF0C\u4F7F\u7528`equals()`\u65B9\u6CD5\u8FDB\u884C\u6BD4\u8F83\u3002\",\n    \"score\": 2.5,\n    \"explanation\": \"`ArrayList`\u7684`remove(Object o)`\u5B9E\u73B0\u662F\u7EBF\u6027\u641C\u7D22\uFF0C\u5B83\u4F1A\u4ECE\u5217\u8868\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u5F00\u59CB\uFF0C\u9010\u4E2A\u8C03\u7528`equals()`\u65B9\u6CD5\u8FDB\u884C\u5339\u914D\uFF0C\u76F4\u5230\u627E\u5230\u7B2C\u4E00\u4E2A\u5339\u914D\u7684\u5143\u7D20\u5E76\u5220\u9664\u5B83\u3002\u56E0\u6B64\u5176\u65F6\u95F4\u590D\u6742\u5EA6\u662FO(n)\u3002\"\n  },\n  {\n    \"id\": 49,\n    \"type\": \"short_answer\",\n    \"question\": \"\u5728Java\u4E2D\uFF0C\u4E3A\u4F55\u63A8\u8350\u4F7F\u7528\u63A5\u53E3\uFF08\u5982`List`\u3001`Map`\uFF09\u4F5C\u4E3A\u53D8\u91CF\u58F0\u660E\u7C7B\u578B\u6216\u65B9\u6CD5\u53C2\u6570\u7C7B\u578B\uFF0C\u800C\u4E0D\u662F\u5177\u4F53\u7684\u5B9E\u73B0\u7C7B\uFF08\u5982 `ArrayList`\u3001`HashMap`\uFF09\uFF1F\",\n    \"answer\": \"\u8FD9\u662F\u9762\u5411\u63A5\u53E3\u7F16\u7A0B\u7684\u4E00\u79CD\u4F53\u73B0\uFF0C\u4E3B\u8981\u6709\u4EE5\u4E0B\u597D\u5904\uFF1A\\n1. **\u89E3\u8026\u548C\u7075\u6D3B\u6027**\uFF1A\u4EE3\u7801\u4E0D\u4F9D\u8D56\u4E8E\u5177\u4F53\u7684\u5B9E\u73B0\u7EC6\u8282\u3002\u672A\u6765\u5982\u679C\u53D1\u73B0`ArrayList`\u6027\u80FD\u4E0D\u4F73\uFF0C\u53EF\u4EE5\u5F88\u65B9\u4FBF\u5730\u5C06\u5176\u66FF\u6362\u4E3A`LinkedList`\u6216\u5176\u4ED6`List`\u5B9E\u73B0\uFF0C\u800C\u4E0D\u9700\u8981\u4FEE\u6539\u5927\u91CF\u4F7F\u7528\u8BE5`List`\u7684\u4EE3\u7801\u3002\\n2. **\u53EF\u6269\u5C55\u6027**\uFF1A\u4F7F\u4EE3\u7801\u66F4\u52A0\u901A\u7528\uFF0C\u53EF\u4EE5\u63A5\u53D7\u4EFB\u4F55\u7B26\u5408\u8BE5\u63A5\u53E3\u89C4\u8303\u7684\u5B9E\u73B0\u7C7B\u7684\u5BF9\u8C61\u3002\\n3. **\u7B26\u5408\u8BBE\u8BA1\u539F\u5219**\uFF1A\u7B26\u5408\u201C\u4F9D\u8D56\u5012\u7F6E\u539F\u5219\u201D\uFF0C\u5373\u5E94\u8BE5\u4F9D\u8D56\u4E8E\u62BD\u8C61\uFF0C\u800C\u4E0D\u662F\u4F9D\u8D56\u4E8E\u5177\u4F53\u3002\",\n    \"score\": 3.5,\n    \"explanation\": \"\u8FD9\u662F\u4E00\u4E2A\u975E\u5E38\u91CD\u8981\u7684\u7F16\u7A0B\u5B9E\u8DF5\u95EE\u9898\uFF0C\u8003\u5BDF\u4E86\u5BF9\u9762\u5411\u5BF9\u8C61\u8BBE\u8BA1\u539F\u5219\u7684\u7406\u89E3\u3002\u4F8B\u5982\uFF0C\u58F0\u660E `List<String> users = new ArrayList<>();` \u597D\u4E8E `ArrayList<String> users = new ArrayList<>();`\u3002\"\n  },\n  {\n    \"id\": 50,\n    \"type\": \"code\",\n    \"question\": \"\u5047\u8BBE\u6709\u4E00\u4E2A`Map<String, Integer> map`\uFF0C\u5176\u4E2D\u4E00\u4E2A\u952E\u4E3A\\\"b\\\"\u3002\u4EE5\u4E0B\u8FD9\u6BB5\u5220\u9664\u64CD\u4F5C\u7684\u4EE3\u7801\u6709\u4EC0\u4E48\u95EE\u9898\uFF1F\u5E94\u8BE5\u5982\u4F55\u4FEE\u6B63\uFF1F\\n\\nfor (String key : map.keySet()) {\\n    if (\\\"b\\\".equals(key)) {\\n        map.remove(\\\"b\\\");\\n    }\\n}\",\n    \"answer\": \"\u95EE\u9898\uFF1A\u8FD9\u6BB5\u4EE3\u7801\u4F1A\u5728\u8FD0\u884C\u65F6\u629B\u51FA`ConcurrentModificationException`\uFF0C\u56E0\u4E3A\u5728\u901A\u8FC7`keySet`\u7684\u8FED\u4EE3\u5668\u8FDB\u884C\u904D\u5386\u65F6\uFF0C\u4F7F\u7528\u4E86`map`\u81EA\u8EAB\u7684\u65B9\u6CD5`remove`\u6765\u4FEE\u6539\u96C6\u5408\u7ED3\u6784\u3002\\n\\n\u4FEE\u6B63\uFF1A\u5E94\u8BE5\u4F7F\u7528\u8FED\u4EE3\u5668\u81EA\u8EAB\u7684`remove`\u65B9\u6CD5\u8FDB\u884C\u5220\u9664\u3002\\n\\nIterator<String> iterator = map.keySet().iterator();\\nwhile (iterator.hasNext()) {\\n    String key = iterator.next();\\n    if (\\\"b\\\".equals(key)) {\\n        iterator.remove(); // \u6B63\u786E\u505A\u6CD5\\n    }\\n}\",\n    \"score\": 4,\n    \"explanation\": \"\u8FD9\u662F\u5E76\u53D1\u4FEE\u6539\u5F02\u5E38\u7684\u53C8\u4E00\u4E2A\u7ECF\u5178\u6848\u4F8B\uFF0C\u8FD9\u6B21\u662F\u53D1\u751F\u5728`Map`\u7684\u904D\u5386\u4E2D\u3002\u5B83\u5F3A\u5316\u4E86\u201C\u5728\u8FED\u4EE3\u8FC7\u7A0B\u4E2D\u5FC5\u987B\u4F7F\u7528\u8FED\u4EE3\u5668\u81EA\u5DF1\u7684\u65B9\u6CD5\u6765\u4FEE\u6539\u96C6\u5408\u201D\u8FD9\u4E00\u9EC4\u91D1\u6CD5\u5219\u3002\"\n  }\n]\n\n/**\n * Calculates the grade based on the score.\n * S: 90-100\n * A: 80-89\n * B: 70-79\n * C: 60-69\n * D: 0-59\n * @param {number} score - The total score.\n * @returns {string} The grade.\n */\nexport const getGrade = (score) => {\n  if (score >= 90) return 'S';\n  if (score >= 80) return 'A';\n  if (score >= 70) return 'B';\n  if (score >= 60) return 'C';\n  return 'D';\n};\n", "import { Hono } from 'hono';\nimport { handle } from 'hono/cloudflare-pages';\nimport { questions } from '../../src/questions'; // Static import for the full question list\n\nconst app = new Hono().basePath('/api');\n\n// Endpoint to get the full list of questions\napp.get('/questions', (c) => {\n  return c.json(questions);\n});\n\n// --- User Management ---\n// Create a new user with a unique ID\napp.post('/users', async (c) => {\n  const { userId } = await c.req.json();\n  if (!userId) {\n    return c.json({ error: 'User ID is required' }, 400);\n  }\n  try {\n    await c.env.DB.prepare('INSERT INTO Users (id) VALUES (?)').bind(userId).run();\n    return c.json({ success: true, userId });\n  } catch (e) {\n    if (e.message.includes('UNIQUE constraint failed')) {\n      return c.json({ success: true, message: 'User already exists.', userId });\n    }\n    return c.json({ error: 'Failed to create user', details: e.message }, 500);\n  }\n});\n\n\n// --- Wrong Answer Book Management ---\n// Get wrong answers for a specific user, including their incorrect answer\napp.get('/users/:userId/wrong-questions', async (c) => {\n  const { userId } = c.req.param();\n  try {\n    const { results } = await c.env.DB.prepare(\n      'SELECT questionId, userAnswer FROM WrongAnswers WHERE userId = ?'\n    ).bind(userId).all();\n\n    const wrongQuestionData = results.map(r => ({\n      id: r.questionId,\n      userAnswer: r.userAnswer\n    }));\n\n    // Join with full question details\n    const wrongQuestions = wrongQuestionData.map(wq => {\n      const questionDetails = questions.find(q => q.id === wq.id);\n      return { ...questionDetails, userAnswer: wq.userAnswer };\n    });\n\n    return c.json(wrongQuestions);\n  } catch (e) {\n    return c.json({ error: 'Failed to fetch wrong questions', details: e.message }, 500);\n  }\n});\n\n// Add or update a wrong answer for a user\napp.post('/users/:userId/wrong-questions', async (c) => {\n  const { userId } = c.req.param();\n  const { questionId, userAnswer } = await c.req.json();\n\n  console.log(`Received request to add wrong question: userId=${userId}, questionId=${questionId}`);\n\n  if (!questionId) {\n    console.error('Validation failed: Question ID is required.');\n    return c.json({ error: 'Question ID is required' }, 400);\n  }\n\n  try {\n    console.log('Ensuring user exists in DB...');\n    await c.env.DB.prepare('INSERT OR IGNORE INTO Users (id) VALUES (?)').bind(userId).run();\n    console.log('User ensured.');\n\n    console.log('Adding/updating wrong answer...');\n    const stmt = c.env.DB.prepare(\n      'INSERT OR REPLACE INTO WrongAnswers (userId, questionId, userAnswer) VALUES (?, ?, ?)'\n    );\n    const result = await stmt.bind(userId, questionId, JSON.stringify(userAnswer)).run();\n    \n    console.log('Database operation result:', JSON.stringify(result));\n      \n    return c.json({ success: true });\n  } catch (e) {\n    console.error('Failed to add or update wrong question:', e.message);\n    return c.json({ error: 'Failed to add or update wrong question', details: e.message }, 500);\n  }\n});\n\n// Remove a wrong answer for a user\napp.delete('/users/:userId/wrong-questions/:questionId', async (c) => {\n  const { userId, questionId } = c.req.param();\n  \n  try {\n    await c.env.DB.prepare('DELETE FROM WrongAnswers WHERE userId = ? AND questionId = ?')\n      .bind(userId, parseInt(questionId, 10))\n      .run();\n    return c.json({ success: true });\n  } catch (e) {\n    return c.json({ error: 'Failed to delete wrong question', details: e.message }, 500);\n  }\n});\n\nexport const onRequest = handle(app);\n", "import { onRequest as __api___path___js_onRequest } from \"/Users/yangzhixin/ClaudeTest/java_test/functions/api/[[path]].js\"\n\nexport const routes = [\n    {\n      routePath: \"/api/:path*\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api___path___js_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/yangzhixin/.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/yangzhixin/.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/yangzhixin/.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/yangzhixin/.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/yangzhixin/ClaudeTest/java_test/.wrangler/tmp/bundle-eXN1cc/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/yangzhixin/.nvm/versions/node/v22.18.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/yangzhixin/ClaudeTest/java_test/.wrangler/tmp/bundle-eXN1cc/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/yangzhixin/ClaudeTest/java_test/.wrangler/tmp/bundle-eXN1cc/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["match", "raw", "app", "routes", "match", "routes", "Node", "Node", "Hono", "app", "Hono", "value", "_a", "result", "char", "prefix", "i"]
}
